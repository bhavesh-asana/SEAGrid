{"ast":null,"code":"import { custosService } from \"../util/custos.util\";\nimport config from \"../../../config\";\nconst getDefaultState = () => {\n  return {\n    tenantsMap: {},\n    clientIdToTenantIdMap: {},\n    tenantsListMap: {},\n    tenantsListPaginationMap: {},\n    tenantRolesMap: {},\n    tenantRolesListMap: {}\n  };\n};\nconst state = getDefaultState();\nconst actions = {\n  async fetchTenantSecret({\n    commit\n  }, {\n    clientId\n  }) {\n    const clientSecret = await custosService.identity.getClientSecret({\n      clientId\n    });\n    commit('SET_TENANT_SECRET', {\n      clientId,\n      clientSecret\n    });\n  },\n  async fetchTenants({\n    commit,\n    rootGetters\n  }, {\n    limit,\n    offset,\n    status,\n    requesterEmail,\n    parentTenantId,\n    parentClientId\n  }) {\n    const params = {\n      limit,\n      offset,\n      status,\n      requesterEmail,\n      parentTenantId,\n      parentClientId\n    };\n    const queryString = JSON.stringify(params);\n    let {\n      tenant,\n      total_num_of_tenants\n    } = await custosService.tenants.fetchTenants(params);\n    const tenantIds = tenant.map(({\n      tenant_id,\n      tenant_status,\n      client_name,\n      domain,\n      client_id,\n      parent_tenant_id,\n      admin_username,\n      requester_email\n    }) => {\n      let type = \"CHILD_TENANT\";\n      let hasAdminPrivileges = false;\n      let currentUsername = rootGetters[\"auth/currentUsername\"];\n\n      // TODO fix\n      if (client_id === config.value('superClientId')) {\n        type = \"SUPER_TENANT\";\n      } else if (parent_tenant_id === \"0\") {\n        type = \"ADMIN_TENANT\";\n      }\n      if (currentUsername === admin_username) {\n        hasAdminPrivileges = true;\n      }\n      commit('SET_TENANT', {\n        tenantId: tenant_id,\n        status: tenant_status,\n        name: client_name,\n        domain,\n        clientId: client_id,\n        type,\n        hasAdminPrivileges,\n        adminUsername: admin_username,\n        requesterEmail: requester_email\n      });\n      return tenant_id;\n    });\n    commit('SET_TENANT_LIST', {\n      queryString,\n      tenantIds\n    });\n    const pagination = {\n      totalRows: total_num_of_tenants,\n      perPage: limit,\n      activePage: offset + 1\n    };\n    commit('SET_TENANT_LIST_PAGINATION', {\n      queryString,\n      pagination\n    });\n  },\n  async fetchTenant({\n    commit,\n    rootGetters\n  }, {\n    clientId\n  }) {\n    let tenant = await custosService.tenants.fetchTenant({\n      clientId\n    });\n    const {\n      admin_username,\n      admin_first_name,\n      admin_last_name,\n      admin_email,\n      tenant_id,\n      tenant_status,\n      client_name,\n      domain,\n      redirect_uris,\n      scope,\n      client_uri,\n      logo_uri,\n      comment,\n      application_type,\n      parent_tenant_id,\n      requester_email\n    } = tenant;\n    let type = \"CHILD_TENANT\";\n    let hasAdminPrivileges = false;\n    let currentUsername = rootGetters[\"auth/currentUsername\"];\n\n    // TODO fix\n    if (clientId === config.value('superClientId')) {\n      type = \"SUPER_TENANT\";\n    } else if (parent_tenant_id === \"0\") {\n      type = \"ADMIN_TENANT\";\n    }\n    if (currentUsername === admin_username) {\n      hasAdminPrivileges = true;\n    }\n    commit('SET_TENANT', {\n      username: admin_username,\n      firstName: admin_first_name,\n      lastName: admin_last_name,\n      email: admin_email,\n      tenantId: tenant_id,\n      status: tenant_status,\n      name: client_name,\n      domain,\n      clientId,\n      redirectUris: redirect_uris,\n      scope: scope,\n      clientUri: client_uri,\n      logoUri: logo_uri,\n      comment: comment,\n      applicationType: application_type,\n      type,\n      hasAdminPrivileges,\n      adminUsername: admin_username,\n      requesterEmail: requester_email\n    });\n  },\n  async createTenantRole({\n    commit\n  }, {\n    clientId,\n    name,\n    description,\n    composite = false,\n    clientLevel = false\n  }) {\n    const {\n      id\n    } = await custosService.tenants.createTenantRole({\n      clientId,\n      name,\n      description,\n      composite,\n      clientLevel\n    });\n    commit('SET_TENANT_ROLE', {\n      tenantRoleId: id,\n      name,\n      description,\n      composite\n    });\n  },\n  async deleteTenantRole(obj, {\n    clientId,\n    name,\n    clientLevel = false\n  }) {\n    await custosService.tenants.deleteTenantRole({\n      clientId,\n      name,\n      clientLevel\n    });\n  },\n  async fetchTenantRoles({\n    commit\n  }, {\n    clientId,\n    clientLevel = false\n  }) {\n    const DEFAULT_CUSTOS_ROLES = [\n      // \"admin-read-only\", \"admin\", \"gateway-provider\", \"gateway-user\", \"offline_access\",\n      // \"uma_authorization\", \"user-pending\"\n    ];\n    let queryString = JSON.stringify({\n      clientId,\n      clientLevel\n    });\n    let {\n      data: {\n        roles\n      }\n    } = await custosService.tenants.fetchTenantRoles({\n      clientId,\n      clientLevel\n    });\n    const tenantRoleIds = roles.filter(({\n      name\n    }) => {\n      return DEFAULT_CUSTOS_ROLES.indexOf(name) < 0;\n    }).map(({\n      id,\n      name,\n      description,\n      composite\n    }) => {\n      const tenantRoleId = id;\n      commit('SET_TENANT_ROLE', {\n        tenantRoleId,\n        name,\n        description,\n        composite\n      });\n      return tenantRoleId;\n    });\n    commit('SET_TENANT_ROLES_LIST', {\n      queryString,\n      tenantRoleIds\n    });\n  },\n  async createTenant(o, {\n    username,\n    firstName,\n    lastName,\n    email,\n    password,\n    tenantName,\n    redirectUris,\n    scope,\n    domain,\n    clientUri,\n    logoUri,\n    comment,\n    applicationType,\n    parentClientId,\n    parentClientSecret\n  }) {\n    const res = await custosService.tenants.createTenant({\n      username,\n      firstName,\n      lastName,\n      email,\n      password,\n      tenantName,\n      redirectUris,\n      scope,\n      domain,\n      clientUri,\n      logoUri,\n      comment,\n      applicationType,\n      parentClientId,\n      parentClientSecret\n    });\n    const {\n      client_id,\n      client_secret\n    } = res.data;\n\n    //         {\n    //  \"client_id\": \"custos-xj1jamrkt4smtdz3tpn6-10001501\",\n    //  \"client_secret\": \"69vJnB744dWIirSaTWFrA1MHSxGmXRmkyJOwZOkv\",\n    //  \"is_activated\": true,\n    //  \"client_id_issued_at\": 1618549123000,\n    //  \"client_secret_expires_at\": 0,\n    //  \"registration_client_uri\": \"https://custos.scigap.org:32036/tenant-management/v1.0.0/oauth2/tenant?client_id=custos-xj1jamrkt4smtdz3tpn6-10001501\",\n    //  \"token_endpoint_auth_method\": \"client_secret_basic\",\n    //  \"msg\": \"Credentials are activated\"\n    // }\n\n    return {\n      clientId: client_id,\n      clientSecret: client_secret\n    };\n\n    // commit('SET_TENANT', {tenantId: client_id, status: \"\", clientSecret: client_secret, name: tenantName, domain});\n  },\n\n  async updateTenant(o, {\n    tenantId,\n    clientId,\n    username,\n    firstName,\n    lastName,\n    email,\n    password,\n    tenantName,\n    redirectUris,\n    scope,\n    domain,\n    clientUri,\n    logoUri,\n    comment,\n    applicationType,\n    requesterEmail\n  }) {\n    await custosService.tenants.updateTenant({\n      tenantId,\n      clientId,\n      username,\n      firstName,\n      lastName,\n      email,\n      password,\n      tenantName,\n      redirectUris,\n      scope,\n      domain,\n      clientUri,\n      logoUri,\n      comment,\n      applicationType,\n      requesterEmail\n    });\n  },\n  async updateTenantStatus({\n    commit\n  }, {\n    clientId,\n    status\n  }) {\n    await custosService.tenants.updateTenantStatus({\n      clientId,\n      status\n    });\n    commit('SET_TENANT_STATUS', {\n      clientId,\n      status\n    });\n  }\n};\nconst mutations = {\n  SET_TENANT(state, {\n    username = null,\n    firstName = null,\n    lastName = null,\n    email = null,\n    tenantId,\n    status,\n    name,\n    domain,\n    clientId,\n    redirectUris = null,\n    scope = null,\n    clientUri = null,\n    logoUri = null,\n    comment = null,\n    applicationType = null,\n    type,\n    hasAdminPrivileges,\n    adminUsername,\n    requesterEmail\n  }) {\n    state.tenantsMap = {\n      ...state.tenantsMap,\n      [clientId]: {\n        ...state.tenantsMap[clientId],\n        username,\n        firstName,\n        lastName,\n        email,\n        tenantId,\n        status,\n        name,\n        domain,\n        clientId,\n        redirectUris,\n        scope,\n        clientUri,\n        logoUri,\n        comment,\n        applicationType,\n        type,\n        hasAdminPrivileges,\n        adminUsername,\n        requesterEmail\n      }\n    };\n    state.clientIdToTenantIdMap = {\n      ...state.clientIdToTenantIdMap,\n      [tenantId]: clientId\n    };\n  },\n  SET_TENANT_SECRET(state, {\n    clientId,\n    clientSecret\n  }) {\n    state.tenantsMap = {\n      ...state.tenantsMap,\n      [clientId]: {\n        ...state.tenantsMap[clientId],\n        clientSecret\n      }\n    };\n  },\n  SET_TENANT_STATUS(state, {\n    clientId,\n    status\n  }) {\n    state.tenantsMap = {\n      ...state.tenantsMap,\n      [clientId]: {\n        ...state.tenantsMap[clientId],\n        status\n      }\n    };\n  },\n  SET_TENANT_LIST(state, {\n    queryString,\n    tenantIds\n  }) {\n    state.tenantsListMap = {\n      ...state.tenantsListMap,\n      [queryString]: tenantIds\n    };\n  },\n  SET_TENANT_LIST_PAGINATION(state, {\n    queryString,\n    pagination\n  }) {\n    state.tenantsListPaginationMap = {\n      ...state.tenantsListPaginationMap,\n      [queryString]: pagination\n    };\n  },\n  SET_TENANT_ROLE(state, {\n    tenantRoleId,\n    name,\n    description,\n    composite\n  }) {\n    state.tenantRolesMap = {\n      ...state.tenantRolesMap,\n      [tenantRoleId]: {\n        tenantRoleId,\n        name,\n        description,\n        composite\n      }\n    };\n  },\n  SET_TENANT_ROLES_LIST(state, {\n    queryString,\n    tenantRoleIds\n  }) {\n    state.tenantRolesListMap = {\n      ...state.tenantRolesListMap,\n      [queryString]: tenantRoleIds\n    };\n  }\n};\nconst getters = {\n  getTenants(state, getters) {\n    return ({\n      limit,\n      offset,\n      status,\n      requesterEmail,\n      parentTenantId,\n      parentClientId\n    }) => {\n      const queryString = JSON.stringify({\n        limit,\n        offset,\n        status,\n        requesterEmail,\n        parentTenantId,\n        parentClientId\n      });\n      if (state.tenantsListMap[queryString]) {\n        const r = state.tenantsListMap[queryString].map(tenantId => getters.getTenant({\n          tenantId\n        }));\n        return r;\n      } else {\n        return null;\n      }\n    };\n  },\n  getTenantsPagination(state) {\n    return ({\n      limit,\n      offset,\n      status,\n      requesterEmail,\n      parentTenantId,\n      parentClientId\n    }) => {\n      const queryString = JSON.stringify({\n        limit,\n        offset,\n        status,\n        requesterEmail,\n        parentTenantId,\n        parentClientId\n      });\n      if (state.tenantsListPaginationMap[queryString]) {\n        return state.tenantsListPaginationMap[queryString];\n      } else {\n        return null;\n      }\n    };\n  },\n  getTenant(state) {\n    return ({\n      tenantId,\n      clientId\n    }) => {\n      if (state.clientIdToTenantIdMap[tenantId]) {\n        return state.tenantsMap[state.clientIdToTenantIdMap[tenantId]];\n      } else if (state.tenantsMap[clientId]) {\n        return state.tenantsMap[clientId];\n      } else {\n        return null;\n      }\n    };\n  },\n  getTenantRoles(state, getters) {\n    return ({\n      clientId,\n      clientLevel = false\n    }) => {\n      const queryString = JSON.stringify({\n        clientId,\n        clientLevel\n      });\n      if (state.tenantRolesListMap[queryString]) {\n        return state.tenantRolesListMap[queryString].map(tenantRoleId => getters.getTenantRole({\n          tenantRoleId\n        }));\n      } else {\n        return null;\n      }\n    };\n  },\n  getTenantRole(state) {\n    return ({\n      tenantRoleId\n    }) => {\n      if (state.tenantRolesMap[tenantRoleId]) {\n        return state.tenantRolesMap[tenantRoleId];\n      } else {\n        return null;\n      }\n    };\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["custosService","config","getDefaultState","tenantsMap","clientIdToTenantIdMap","tenantsListMap","tenantsListPaginationMap","tenantRolesMap","tenantRolesListMap","state","actions","fetchTenantSecret","commit","clientId","clientSecret","identity","getClientSecret","fetchTenants","rootGetters","limit","offset","status","requesterEmail","parentTenantId","parentClientId","params","queryString","JSON","stringify","tenant","total_num_of_tenants","tenants","tenantIds","map","tenant_id","tenant_status","client_name","domain","client_id","parent_tenant_id","admin_username","requester_email","type","hasAdminPrivileges","currentUsername","value","tenantId","name","adminUsername","pagination","totalRows","perPage","activePage","fetchTenant","admin_first_name","admin_last_name","admin_email","redirect_uris","scope","client_uri","logo_uri","comment","application_type","username","firstName","lastName","email","redirectUris","clientUri","logoUri","applicationType","createTenantRole","description","composite","clientLevel","id","tenantRoleId","deleteTenantRole","obj","fetchTenantRoles","DEFAULT_CUSTOS_ROLES","data","roles","tenantRoleIds","filter","indexOf","createTenant","o","password","tenantName","parentClientSecret","res","client_secret","updateTenant","updateTenantStatus","mutations","SET_TENANT","SET_TENANT_SECRET","SET_TENANT_STATUS","SET_TENANT_LIST","SET_TENANT_LIST_PAGINATION","SET_TENANT_ROLE","SET_TENANT_ROLES_LIST","getters","getTenants","r","getTenant","getTenantsPagination","getTenantRoles","getTenantRole","namespaced"],"sources":["/Users/bhavesh/Developer/SEAGrid/data-catalog/node_modules/airavata-custos-portal/src/lib/store/modules/tenant.store.js"],"sourcesContent":["import {custosService} from \"../util/custos.util\";\nimport config from \"../../../config\";\n\nconst getDefaultState = () => {\n    return {\n        tenantsMap: {},\n        clientIdToTenantIdMap: {},\n        tenantsListMap: {},\n        tenantsListPaginationMap: {},\n        tenantRolesMap: {},\n        tenantRolesListMap: {}\n    }\n};\n\nconst state = getDefaultState();\n\nconst actions = {\n    async fetchTenantSecret({commit}, {clientId}) {\n        const clientSecret = await custosService.identity.getClientSecret({clientId});\n\n        commit('SET_TENANT_SECRET', {clientId, clientSecret});\n    },\n    async fetchTenants({commit, rootGetters}, {limit, offset, status, requesterEmail, parentTenantId, parentClientId}) {\n        const params = {limit, offset, status, requesterEmail, parentTenantId, parentClientId};\n        const queryString = JSON.stringify(params);\n\n        let {tenant, total_num_of_tenants} = await custosService.tenants.fetchTenants(params);\n        const tenantIds = tenant.map(({tenant_id, tenant_status, client_name, domain, client_id, parent_tenant_id, admin_username, requester_email}) => {\n            let type = \"CHILD_TENANT\";\n            let hasAdminPrivileges = false;\n            let currentUsername = rootGetters[\"auth/currentUsername\"];\n\n            // TODO fix\n            if (client_id === config.value('superClientId')) {\n                type = \"SUPER_TENANT\";\n            } else if (parent_tenant_id === \"0\") {\n                type = \"ADMIN_TENANT\";\n            }\n\n            if (currentUsername === admin_username) {\n                hasAdminPrivileges = true;\n            }\n\n            commit('SET_TENANT', {\n                tenantId: tenant_id,\n                status: tenant_status,\n                name: client_name,\n                domain,\n                clientId: client_id,\n                type,\n                hasAdminPrivileges,\n                adminUsername: admin_username,\n                requesterEmail: requester_email\n            });\n\n            return tenant_id;\n        });\n        commit('SET_TENANT_LIST', {queryString, tenantIds});\n\n        const pagination = {totalRows: total_num_of_tenants, perPage: limit, activePage: offset + 1};\n        commit('SET_TENANT_LIST_PAGINATION', {queryString, pagination});\n    },\n\n\n    async fetchTenant({commit, rootGetters}, {clientId}) {\n        let tenant = await custosService.tenants.fetchTenant({clientId});\n\n        const {\n            admin_username, admin_first_name, admin_last_name, admin_email,\n            tenant_id, tenant_status, client_name, domain,\n            redirect_uris, scope, client_uri, logo_uri, comment, application_type,\n            parent_tenant_id, requester_email\n        } = tenant;\n\n        let type = \"CHILD_TENANT\";\n        let hasAdminPrivileges = false;\n        let currentUsername = rootGetters[\"auth/currentUsername\"];\n\n        // TODO fix\n        if (clientId === config.value('superClientId')) {\n            type = \"SUPER_TENANT\";\n        } else if (parent_tenant_id === \"0\") {\n            type = \"ADMIN_TENANT\";\n        }\n\n        if (currentUsername === admin_username) {\n            hasAdminPrivileges = true;\n        }\n\n        commit('SET_TENANT', {\n            username: admin_username, firstName: admin_first_name, lastName: admin_last_name, email: admin_email,\n            tenantId: tenant_id, status: tenant_status, name: client_name, domain, clientId,\n            redirectUris: redirect_uris, scope: scope, clientUri: client_uri,\n            logoUri: logo_uri, comment: comment, applicationType: application_type,\n            type, hasAdminPrivileges,\n            adminUsername: admin_username, requesterEmail: requester_email\n        });\n    },\n    async createTenantRole({commit}, {clientId, name, description, composite = false, clientLevel = false}) {\n        const {id} = await custosService.tenants.createTenantRole({\n            clientId, name, description, composite, clientLevel\n        });\n\n        commit('SET_TENANT_ROLE', {\n            tenantRoleId: id,\n            name,\n            description,\n            composite\n        });\n    },\n    async deleteTenantRole(obj, {clientId, name, clientLevel = false}) {\n        await custosService.tenants.deleteTenantRole({\n            clientId, name, clientLevel\n        });\n    },\n    async fetchTenantRoles({commit}, {clientId, clientLevel = false}) {\n        const DEFAULT_CUSTOS_ROLES = [\n            // \"admin-read-only\", \"admin\", \"gateway-provider\", \"gateway-user\", \"offline_access\",\n            // \"uma_authorization\", \"user-pending\"\n        ];\n\n        let queryString = JSON.stringify({clientId, clientLevel});\n\n        let {data: {roles}} = await custosService.tenants.fetchTenantRoles({clientId, clientLevel});\n        const tenantRoleIds = roles.filter(({name}) => {\n            return DEFAULT_CUSTOS_ROLES.indexOf(name) < 0\n        }).map(({id, name, description, composite}) => {\n            const tenantRoleId = id\n            commit('SET_TENANT_ROLE', {tenantRoleId, name, description, composite});\n\n            return tenantRoleId;\n        });\n        commit('SET_TENANT_ROLES_LIST', {queryString, tenantRoleIds});\n    },\n    async createTenant(o, {username, firstName, lastName, email, password, tenantName, redirectUris, scope, domain, clientUri, logoUri, comment, applicationType, parentClientId, parentClientSecret}) {\n        const res = await custosService.tenants.createTenant({\n            username,\n            firstName,\n            lastName,\n            email,\n            password,\n            tenantName,\n            redirectUris,\n            scope,\n            domain,\n            clientUri,\n            logoUri,\n            comment,\n            applicationType,\n            parentClientId,\n            parentClientSecret\n        });\n\n        const {client_id, client_secret} = res.data;\n\n//         {\n//  \"client_id\": \"custos-xj1jamrkt4smtdz3tpn6-10001501\",\n//  \"client_secret\": \"69vJnB744dWIirSaTWFrA1MHSxGmXRmkyJOwZOkv\",\n//  \"is_activated\": true,\n//  \"client_id_issued_at\": 1618549123000,\n//  \"client_secret_expires_at\": 0,\n//  \"registration_client_uri\": \"https://custos.scigap.org:32036/tenant-management/v1.0.0/oauth2/tenant?client_id=custos-xj1jamrkt4smtdz3tpn6-10001501\",\n//  \"token_endpoint_auth_method\": \"client_secret_basic\",\n//  \"msg\": \"Credentials are activated\"\n// }\n\n        return {clientId: client_id, clientSecret: client_secret}\n\n        // commit('SET_TENANT', {tenantId: client_id, status: \"\", clientSecret: client_secret, name: tenantName, domain});\n    },\n\n    async updateTenant(o, {tenantId, clientId, username, firstName, lastName, email, password, tenantName, redirectUris, scope, domain, clientUri, logoUri, comment, applicationType, requesterEmail}) {\n        await custosService.tenants.updateTenant({\n            tenantId,\n            clientId,\n            username,\n            firstName,\n            lastName,\n            email,\n            password,\n            tenantName,\n            redirectUris,\n            scope,\n            domain,\n            clientUri,\n            logoUri,\n            comment,\n            applicationType,\n            requesterEmail\n        });\n    },\n    async updateTenantStatus({commit}, {clientId, status}) {\n        await custosService.tenants.updateTenantStatus({clientId, status});\n        commit('SET_TENANT_STATUS', {clientId, status});\n    }\n\n}\n\nconst mutations = {\n    SET_TENANT(state, {\n        username = null, firstName = null, lastName = null, email = null,\n        tenantId, status, name, domain, clientId, redirectUris = null, scope = null,\n        clientUri = null, logoUri = null, comment = null, applicationType = null,\n        type, hasAdminPrivileges, adminUsername, requesterEmail\n    }) {\n        state.tenantsMap = {\n            ...state.tenantsMap,\n            [clientId]: {\n                ...state.tenantsMap[clientId],\n                username, firstName, lastName, email,\n                tenantId, status, name, domain, clientId,\n                redirectUris, scope, clientUri, logoUri, comment, applicationType,\n                type, hasAdminPrivileges, adminUsername, requesterEmail\n            }\n        };\n        state.clientIdToTenantIdMap = {\n            ...state.clientIdToTenantIdMap,\n            [tenantId]: clientId\n        };\n    },\n    SET_TENANT_SECRET(state, {clientId, clientSecret}) {\n        state.tenantsMap = {\n            ...state.tenantsMap,\n            [clientId]: {\n                ...state.tenantsMap[clientId],\n                clientSecret\n            }\n        };\n    },\n    SET_TENANT_STATUS(state, {clientId, status}) {\n        state.tenantsMap = {\n            ...state.tenantsMap,\n            [clientId]: {\n                ...state.tenantsMap[clientId],\n                status\n            }\n        };\n    },\n    SET_TENANT_LIST(state, {queryString, tenantIds}) {\n        state.tenantsListMap = {\n            ...state.tenantsListMap,\n            [queryString]: tenantIds\n        }\n    },\n    SET_TENANT_LIST_PAGINATION(state, {queryString, pagination}) {\n        state.tenantsListPaginationMap = {\n            ...state.tenantsListPaginationMap,\n            [queryString]: pagination\n        }\n    },\n    SET_TENANT_ROLE(state, {tenantRoleId, name, description, composite}) {\n        state.tenantRolesMap = {\n            ...state.tenantRolesMap,\n            [tenantRoleId]: {tenantRoleId, name, description, composite}\n        };\n    },\n    SET_TENANT_ROLES_LIST(state, {queryString, tenantRoleIds}) {\n        state.tenantRolesListMap = {\n            ...state.tenantRolesListMap,\n            [queryString]: tenantRoleIds\n        }\n    }\n}\n\nconst getters = {\n    getTenants(state, getters) {\n        return ({limit, offset, status, requesterEmail, parentTenantId, parentClientId}) => {\n            const queryString = JSON.stringify({limit, offset, status, requesterEmail, parentTenantId, parentClientId});\n            if (state.tenantsListMap[queryString]) {\n                const r = state.tenantsListMap[queryString].map(tenantId => getters.getTenant({tenantId}));\n\n                return r\n            } else {\n                return null;\n            }\n        }\n    },\n    getTenantsPagination(state) {\n        return ({limit, offset, status, requesterEmail, parentTenantId, parentClientId}) => {\n            const queryString = JSON.stringify({limit, offset, status, requesterEmail, parentTenantId, parentClientId});\n            if (state.tenantsListPaginationMap[queryString]) {\n                return state.tenantsListPaginationMap[queryString];\n            } else {\n                return null;\n            }\n        }\n    },\n    getTenant(state) {\n        return ({tenantId, clientId}) => {\n            if (state.clientIdToTenantIdMap[tenantId]) {\n                return state.tenantsMap[state.clientIdToTenantIdMap[tenantId]];\n            } else if (state.tenantsMap[clientId]) {\n                return state.tenantsMap[clientId];\n            } else {\n                return null;\n            }\n        }\n    },\n    getTenantRoles(state, getters) {\n        return ({clientId, clientLevel = false}) => {\n            const queryString = JSON.stringify({clientId, clientLevel});\n            if (state.tenantRolesListMap[queryString]) {\n                return state.tenantRolesListMap[queryString].map(tenantRoleId => getters.getTenantRole({tenantRoleId}));\n            } else {\n                return null;\n            }\n        }\n    },\n    getTenantRole(state) {\n        return ({tenantRoleId}) => {\n            if (state.tenantRolesMap[tenantRoleId]) {\n                return state.tenantRolesMap[tenantRoleId];\n            } else {\n                return null;\n            }\n        }\n    }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n}\n"],"mappings":"AAAA,SAAQA,aAAa,QAAO,qBAAqB;AACjD,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,MAAMC,eAAe,GAAG,MAAM;EAC1B,OAAO;IACHC,UAAU,EAAE,CAAC,CAAC;IACdC,qBAAqB,EAAE,CAAC,CAAC;IACzBC,cAAc,EAAE,CAAC,CAAC;IAClBC,wBAAwB,EAAE,CAAC,CAAC;IAC5BC,cAAc,EAAE,CAAC,CAAC;IAClBC,kBAAkB,EAAE,CAAC;EACzB,CAAC;AACL,CAAC;AAED,MAAMC,KAAK,GAAGP,eAAe,EAAE;AAE/B,MAAMQ,OAAO,GAAG;EACZ,MAAMC,iBAAiB,CAAC;IAACC;EAAM,CAAC,EAAE;IAACC;EAAQ,CAAC,EAAE;IAC1C,MAAMC,YAAY,GAAG,MAAMd,aAAa,CAACe,QAAQ,CAACC,eAAe,CAAC;MAACH;IAAQ,CAAC,CAAC;IAE7ED,MAAM,CAAC,mBAAmB,EAAE;MAACC,QAAQ;MAAEC;IAAY,CAAC,CAAC;EACzD,CAAC;EACD,MAAMG,YAAY,CAAC;IAACL,MAAM;IAAEM;EAAW,CAAC,EAAE;IAACC,KAAK;IAAEC,MAAM;IAAEC,MAAM;IAAEC,cAAc;IAAEC,cAAc;IAAEC;EAAc,CAAC,EAAE;IAC/G,MAAMC,MAAM,GAAG;MAACN,KAAK;MAAEC,MAAM;MAAEC,MAAM;MAAEC,cAAc;MAAEC,cAAc;MAAEC;IAAc,CAAC;IACtF,MAAME,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC;IAE1C,IAAI;MAACI,MAAM;MAAEC;IAAoB,CAAC,GAAG,MAAM9B,aAAa,CAAC+B,OAAO,CAACd,YAAY,CAACQ,MAAM,CAAC;IACrF,MAAMO,SAAS,GAAGH,MAAM,CAACI,GAAG,CAAC,CAAC;MAACC,SAAS;MAAEC,aAAa;MAAEC,WAAW;MAAEC,MAAM;MAAEC,SAAS;MAAEC,gBAAgB;MAAEC,cAAc;MAAEC;IAAe,CAAC,KAAK;MAC5I,IAAIC,IAAI,GAAG,cAAc;MACzB,IAAIC,kBAAkB,GAAG,KAAK;MAC9B,IAAIC,eAAe,GAAG1B,WAAW,CAAC,sBAAsB,CAAC;;MAEzD;MACA,IAAIoB,SAAS,KAAKrC,MAAM,CAAC4C,KAAK,CAAC,eAAe,CAAC,EAAE;QAC7CH,IAAI,GAAG,cAAc;MACzB,CAAC,MAAM,IAAIH,gBAAgB,KAAK,GAAG,EAAE;QACjCG,IAAI,GAAG,cAAc;MACzB;MAEA,IAAIE,eAAe,KAAKJ,cAAc,EAAE;QACpCG,kBAAkB,GAAG,IAAI;MAC7B;MAEA/B,MAAM,CAAC,YAAY,EAAE;QACjBkC,QAAQ,EAAEZ,SAAS;QACnBb,MAAM,EAAEc,aAAa;QACrBY,IAAI,EAAEX,WAAW;QACjBC,MAAM;QACNxB,QAAQ,EAAEyB,SAAS;QACnBI,IAAI;QACJC,kBAAkB;QAClBK,aAAa,EAAER,cAAc;QAC7BlB,cAAc,EAAEmB;MACpB,CAAC,CAAC;MAEF,OAAOP,SAAS;IACpB,CAAC,CAAC;IACFtB,MAAM,CAAC,iBAAiB,EAAE;MAACc,WAAW;MAAEM;IAAS,CAAC,CAAC;IAEnD,MAAMiB,UAAU,GAAG;MAACC,SAAS,EAAEpB,oBAAoB;MAAEqB,OAAO,EAAEhC,KAAK;MAAEiC,UAAU,EAAEhC,MAAM,GAAG;IAAC,CAAC;IAC5FR,MAAM,CAAC,4BAA4B,EAAE;MAACc,WAAW;MAAEuB;IAAU,CAAC,CAAC;EACnE,CAAC;EAGD,MAAMI,WAAW,CAAC;IAACzC,MAAM;IAAEM;EAAW,CAAC,EAAE;IAACL;EAAQ,CAAC,EAAE;IACjD,IAAIgB,MAAM,GAAG,MAAM7B,aAAa,CAAC+B,OAAO,CAACsB,WAAW,CAAC;MAACxC;IAAQ,CAAC,CAAC;IAEhE,MAAM;MACF2B,cAAc;MAAEc,gBAAgB;MAAEC,eAAe;MAAEC,WAAW;MAC9DtB,SAAS;MAAEC,aAAa;MAAEC,WAAW;MAAEC,MAAM;MAC7CoB,aAAa;MAAEC,KAAK;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,gBAAgB;MACrEvB,gBAAgB;MAAEE;IACtB,CAAC,GAAGZ,MAAM;IAEV,IAAIa,IAAI,GAAG,cAAc;IACzB,IAAIC,kBAAkB,GAAG,KAAK;IAC9B,IAAIC,eAAe,GAAG1B,WAAW,CAAC,sBAAsB,CAAC;;IAEzD;IACA,IAAIL,QAAQ,KAAKZ,MAAM,CAAC4C,KAAK,CAAC,eAAe,CAAC,EAAE;MAC5CH,IAAI,GAAG,cAAc;IACzB,CAAC,MAAM,IAAIH,gBAAgB,KAAK,GAAG,EAAE;MACjCG,IAAI,GAAG,cAAc;IACzB;IAEA,IAAIE,eAAe,KAAKJ,cAAc,EAAE;MACpCG,kBAAkB,GAAG,IAAI;IAC7B;IAEA/B,MAAM,CAAC,YAAY,EAAE;MACjBmD,QAAQ,EAAEvB,cAAc;MAAEwB,SAAS,EAAEV,gBAAgB;MAAEW,QAAQ,EAAEV,eAAe;MAAEW,KAAK,EAAEV,WAAW;MACpGV,QAAQ,EAAEZ,SAAS;MAAEb,MAAM,EAAEc,aAAa;MAAEY,IAAI,EAAEX,WAAW;MAAEC,MAAM;MAAExB,QAAQ;MAC/EsD,YAAY,EAAEV,aAAa;MAAEC,KAAK,EAAEA,KAAK;MAAEU,SAAS,EAAET,UAAU;MAChEU,OAAO,EAAET,QAAQ;MAAEC,OAAO,EAAEA,OAAO;MAAES,eAAe,EAAER,gBAAgB;MACtEpB,IAAI;MAAEC,kBAAkB;MACxBK,aAAa,EAAER,cAAc;MAAElB,cAAc,EAAEmB;IACnD,CAAC,CAAC;EACN,CAAC;EACD,MAAM8B,gBAAgB,CAAC;IAAC3D;EAAM,CAAC,EAAE;IAACC,QAAQ;IAAEkC,IAAI;IAAEyB,WAAW;IAAEC,SAAS,GAAG,KAAK;IAAEC,WAAW,GAAG;EAAK,CAAC,EAAE;IACpG,MAAM;MAACC;IAAE,CAAC,GAAG,MAAM3E,aAAa,CAAC+B,OAAO,CAACwC,gBAAgB,CAAC;MACtD1D,QAAQ;MAAEkC,IAAI;MAAEyB,WAAW;MAAEC,SAAS;MAAEC;IAC5C,CAAC,CAAC;IAEF9D,MAAM,CAAC,iBAAiB,EAAE;MACtBgE,YAAY,EAAED,EAAE;MAChB5B,IAAI;MACJyB,WAAW;MACXC;IACJ,CAAC,CAAC;EACN,CAAC;EACD,MAAMI,gBAAgB,CAACC,GAAG,EAAE;IAACjE,QAAQ;IAAEkC,IAAI;IAAE2B,WAAW,GAAG;EAAK,CAAC,EAAE;IAC/D,MAAM1E,aAAa,CAAC+B,OAAO,CAAC8C,gBAAgB,CAAC;MACzChE,QAAQ;MAAEkC,IAAI;MAAE2B;IACpB,CAAC,CAAC;EACN,CAAC;EACD,MAAMK,gBAAgB,CAAC;IAACnE;EAAM,CAAC,EAAE;IAACC,QAAQ;IAAE6D,WAAW,GAAG;EAAK,CAAC,EAAE;IAC9D,MAAMM,oBAAoB,GAAG;MACzB;MACA;IAAA,CACH;IAED,IAAItD,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC;MAACf,QAAQ;MAAE6D;IAAW,CAAC,CAAC;IAEzD,IAAI;MAACO,IAAI,EAAE;QAACC;MAAK;IAAC,CAAC,GAAG,MAAMlF,aAAa,CAAC+B,OAAO,CAACgD,gBAAgB,CAAC;MAAClE,QAAQ;MAAE6D;IAAW,CAAC,CAAC;IAC3F,MAAMS,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC,CAAC;MAACrC;IAAI,CAAC,KAAK;MAC3C,OAAOiC,oBAAoB,CAACK,OAAO,CAACtC,IAAI,CAAC,GAAG,CAAC;IACjD,CAAC,CAAC,CAACd,GAAG,CAAC,CAAC;MAAC0C,EAAE;MAAE5B,IAAI;MAAEyB,WAAW;MAAEC;IAAS,CAAC,KAAK;MAC3C,MAAMG,YAAY,GAAGD,EAAE;MACvB/D,MAAM,CAAC,iBAAiB,EAAE;QAACgE,YAAY;QAAE7B,IAAI;QAAEyB,WAAW;QAAEC;MAAS,CAAC,CAAC;MAEvE,OAAOG,YAAY;IACvB,CAAC,CAAC;IACFhE,MAAM,CAAC,uBAAuB,EAAE;MAACc,WAAW;MAAEyD;IAAa,CAAC,CAAC;EACjE,CAAC;EACD,MAAMG,YAAY,CAACC,CAAC,EAAE;IAACxB,QAAQ;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,KAAK;IAAEsB,QAAQ;IAAEC,UAAU;IAAEtB,YAAY;IAAET,KAAK;IAAErB,MAAM;IAAE+B,SAAS;IAAEC,OAAO;IAAER,OAAO;IAAES,eAAe;IAAE9C,cAAc;IAAEkE;EAAkB,CAAC,EAAE;IAC/L,MAAMC,GAAG,GAAG,MAAM3F,aAAa,CAAC+B,OAAO,CAACuD,YAAY,CAAC;MACjDvB,QAAQ;MACRC,SAAS;MACTC,QAAQ;MACRC,KAAK;MACLsB,QAAQ;MACRC,UAAU;MACVtB,YAAY;MACZT,KAAK;MACLrB,MAAM;MACN+B,SAAS;MACTC,OAAO;MACPR,OAAO;MACPS,eAAe;MACf9C,cAAc;MACdkE;IACJ,CAAC,CAAC;IAEF,MAAM;MAACpD,SAAS;MAAEsD;IAAa,CAAC,GAAGD,GAAG,CAACV,IAAI;;IAEnD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEQ,OAAO;MAACpE,QAAQ,EAAEyB,SAAS;MAAExB,YAAY,EAAE8E;IAAa,CAAC;;IAEzD;EACJ,CAAC;;EAED,MAAMC,YAAY,CAACN,CAAC,EAAE;IAACzC,QAAQ;IAAEjC,QAAQ;IAAEkD,QAAQ;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,KAAK;IAAEsB,QAAQ;IAAEC,UAAU;IAAEtB,YAAY;IAAET,KAAK;IAAErB,MAAM;IAAE+B,SAAS;IAAEC,OAAO;IAAER,OAAO;IAAES,eAAe;IAAEhD;EAAc,CAAC,EAAE;IAC/L,MAAMtB,aAAa,CAAC+B,OAAO,CAAC8D,YAAY,CAAC;MACrC/C,QAAQ;MACRjC,QAAQ;MACRkD,QAAQ;MACRC,SAAS;MACTC,QAAQ;MACRC,KAAK;MACLsB,QAAQ;MACRC,UAAU;MACVtB,YAAY;MACZT,KAAK;MACLrB,MAAM;MACN+B,SAAS;MACTC,OAAO;MACPR,OAAO;MACPS,eAAe;MACfhD;IACJ,CAAC,CAAC;EACN,CAAC;EACD,MAAMwE,kBAAkB,CAAC;IAAClF;EAAM,CAAC,EAAE;IAACC,QAAQ;IAAEQ;EAAM,CAAC,EAAE;IACnD,MAAMrB,aAAa,CAAC+B,OAAO,CAAC+D,kBAAkB,CAAC;MAACjF,QAAQ;MAAEQ;IAAM,CAAC,CAAC;IAClET,MAAM,CAAC,mBAAmB,EAAE;MAACC,QAAQ;MAAEQ;IAAM,CAAC,CAAC;EACnD;AAEJ,CAAC;AAED,MAAM0E,SAAS,GAAG;EACdC,UAAU,CAACvF,KAAK,EAAE;IACdsD,QAAQ,GAAG,IAAI;IAAEC,SAAS,GAAG,IAAI;IAAEC,QAAQ,GAAG,IAAI;IAAEC,KAAK,GAAG,IAAI;IAChEpB,QAAQ;IAAEzB,MAAM;IAAE0B,IAAI;IAAEV,MAAM;IAAExB,QAAQ;IAAEsD,YAAY,GAAG,IAAI;IAAET,KAAK,GAAG,IAAI;IAC3EU,SAAS,GAAG,IAAI;IAAEC,OAAO,GAAG,IAAI;IAAER,OAAO,GAAG,IAAI;IAAES,eAAe,GAAG,IAAI;IACxE5B,IAAI;IAAEC,kBAAkB;IAAEK,aAAa;IAAE1B;EAC7C,CAAC,EAAE;IACCb,KAAK,CAACN,UAAU,GAAG;MACf,GAAGM,KAAK,CAACN,UAAU;MACnB,CAACU,QAAQ,GAAG;QACR,GAAGJ,KAAK,CAACN,UAAU,CAACU,QAAQ,CAAC;QAC7BkD,QAAQ;QAAEC,SAAS;QAAEC,QAAQ;QAAEC,KAAK;QACpCpB,QAAQ;QAAEzB,MAAM;QAAE0B,IAAI;QAAEV,MAAM;QAAExB,QAAQ;QACxCsD,YAAY;QAAET,KAAK;QAAEU,SAAS;QAAEC,OAAO;QAAER,OAAO;QAAES,eAAe;QACjE5B,IAAI;QAAEC,kBAAkB;QAAEK,aAAa;QAAE1B;MAC7C;IACJ,CAAC;IACDb,KAAK,CAACL,qBAAqB,GAAG;MAC1B,GAAGK,KAAK,CAACL,qBAAqB;MAC9B,CAAC0C,QAAQ,GAAGjC;IAChB,CAAC;EACL,CAAC;EACDoF,iBAAiB,CAACxF,KAAK,EAAE;IAACI,QAAQ;IAAEC;EAAY,CAAC,EAAE;IAC/CL,KAAK,CAACN,UAAU,GAAG;MACf,GAAGM,KAAK,CAACN,UAAU;MACnB,CAACU,QAAQ,GAAG;QACR,GAAGJ,KAAK,CAACN,UAAU,CAACU,QAAQ,CAAC;QAC7BC;MACJ;IACJ,CAAC;EACL,CAAC;EACDoF,iBAAiB,CAACzF,KAAK,EAAE;IAACI,QAAQ;IAAEQ;EAAM,CAAC,EAAE;IACzCZ,KAAK,CAACN,UAAU,GAAG;MACf,GAAGM,KAAK,CAACN,UAAU;MACnB,CAACU,QAAQ,GAAG;QACR,GAAGJ,KAAK,CAACN,UAAU,CAACU,QAAQ,CAAC;QAC7BQ;MACJ;IACJ,CAAC;EACL,CAAC;EACD8E,eAAe,CAAC1F,KAAK,EAAE;IAACiB,WAAW;IAAEM;EAAS,CAAC,EAAE;IAC7CvB,KAAK,CAACJ,cAAc,GAAG;MACnB,GAAGI,KAAK,CAACJ,cAAc;MACvB,CAACqB,WAAW,GAAGM;IACnB,CAAC;EACL,CAAC;EACDoE,0BAA0B,CAAC3F,KAAK,EAAE;IAACiB,WAAW;IAAEuB;EAAU,CAAC,EAAE;IACzDxC,KAAK,CAACH,wBAAwB,GAAG;MAC7B,GAAGG,KAAK,CAACH,wBAAwB;MACjC,CAACoB,WAAW,GAAGuB;IACnB,CAAC;EACL,CAAC;EACDoD,eAAe,CAAC5F,KAAK,EAAE;IAACmE,YAAY;IAAE7B,IAAI;IAAEyB,WAAW;IAAEC;EAAS,CAAC,EAAE;IACjEhE,KAAK,CAACF,cAAc,GAAG;MACnB,GAAGE,KAAK,CAACF,cAAc;MACvB,CAACqE,YAAY,GAAG;QAACA,YAAY;QAAE7B,IAAI;QAAEyB,WAAW;QAAEC;MAAS;IAC/D,CAAC;EACL,CAAC;EACD6B,qBAAqB,CAAC7F,KAAK,EAAE;IAACiB,WAAW;IAAEyD;EAAa,CAAC,EAAE;IACvD1E,KAAK,CAACD,kBAAkB,GAAG;MACvB,GAAGC,KAAK,CAACD,kBAAkB;MAC3B,CAACkB,WAAW,GAAGyD;IACnB,CAAC;EACL;AACJ,CAAC;AAED,MAAMoB,OAAO,GAAG;EACZC,UAAU,CAAC/F,KAAK,EAAE8F,OAAO,EAAE;IACvB,OAAO,CAAC;MAACpF,KAAK;MAAEC,MAAM;MAAEC,MAAM;MAAEC,cAAc;MAAEC,cAAc;MAAEC;IAAc,CAAC,KAAK;MAChF,MAAME,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC;QAACT,KAAK;QAAEC,MAAM;QAAEC,MAAM;QAAEC,cAAc;QAAEC,cAAc;QAAEC;MAAc,CAAC,CAAC;MAC3G,IAAIf,KAAK,CAACJ,cAAc,CAACqB,WAAW,CAAC,EAAE;QACnC,MAAM+E,CAAC,GAAGhG,KAAK,CAACJ,cAAc,CAACqB,WAAW,CAAC,CAACO,GAAG,CAACa,QAAQ,IAAIyD,OAAO,CAACG,SAAS,CAAC;UAAC5D;QAAQ,CAAC,CAAC,CAAC;QAE1F,OAAO2D,CAAC;MACZ,CAAC,MAAM;QACH,OAAO,IAAI;MACf;IACJ,CAAC;EACL,CAAC;EACDE,oBAAoB,CAAClG,KAAK,EAAE;IACxB,OAAO,CAAC;MAACU,KAAK;MAAEC,MAAM;MAAEC,MAAM;MAAEC,cAAc;MAAEC,cAAc;MAAEC;IAAc,CAAC,KAAK;MAChF,MAAME,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC;QAACT,KAAK;QAAEC,MAAM;QAAEC,MAAM;QAAEC,cAAc;QAAEC,cAAc;QAAEC;MAAc,CAAC,CAAC;MAC3G,IAAIf,KAAK,CAACH,wBAAwB,CAACoB,WAAW,CAAC,EAAE;QAC7C,OAAOjB,KAAK,CAACH,wBAAwB,CAACoB,WAAW,CAAC;MACtD,CAAC,MAAM;QACH,OAAO,IAAI;MACf;IACJ,CAAC;EACL,CAAC;EACDgF,SAAS,CAACjG,KAAK,EAAE;IACb,OAAO,CAAC;MAACqC,QAAQ;MAAEjC;IAAQ,CAAC,KAAK;MAC7B,IAAIJ,KAAK,CAACL,qBAAqB,CAAC0C,QAAQ,CAAC,EAAE;QACvC,OAAOrC,KAAK,CAACN,UAAU,CAACM,KAAK,CAACL,qBAAqB,CAAC0C,QAAQ,CAAC,CAAC;MAClE,CAAC,MAAM,IAAIrC,KAAK,CAACN,UAAU,CAACU,QAAQ,CAAC,EAAE;QACnC,OAAOJ,KAAK,CAACN,UAAU,CAACU,QAAQ,CAAC;MACrC,CAAC,MAAM;QACH,OAAO,IAAI;MACf;IACJ,CAAC;EACL,CAAC;EACD+F,cAAc,CAACnG,KAAK,EAAE8F,OAAO,EAAE;IAC3B,OAAO,CAAC;MAAC1F,QAAQ;MAAE6D,WAAW,GAAG;IAAK,CAAC,KAAK;MACxC,MAAMhD,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC;QAACf,QAAQ;QAAE6D;MAAW,CAAC,CAAC;MAC3D,IAAIjE,KAAK,CAACD,kBAAkB,CAACkB,WAAW,CAAC,EAAE;QACvC,OAAOjB,KAAK,CAACD,kBAAkB,CAACkB,WAAW,CAAC,CAACO,GAAG,CAAC2C,YAAY,IAAI2B,OAAO,CAACM,aAAa,CAAC;UAACjC;QAAY,CAAC,CAAC,CAAC;MAC3G,CAAC,MAAM;QACH,OAAO,IAAI;MACf;IACJ,CAAC;EACL,CAAC;EACDiC,aAAa,CAACpG,KAAK,EAAE;IACjB,OAAO,CAAC;MAACmE;IAAY,CAAC,KAAK;MACvB,IAAInE,KAAK,CAACF,cAAc,CAACqE,YAAY,CAAC,EAAE;QACpC,OAAOnE,KAAK,CAACF,cAAc,CAACqE,YAAY,CAAC;MAC7C,CAAC,MAAM;QACH,OAAO,IAAI;MACf;IACJ,CAAC;EACL;AACJ,CAAC;AAED,eAAe;EACXkC,UAAU,EAAE,IAAI;EAChBrG,KAAK;EACL8F,OAAO;EACP7F,OAAO;EACPqF;AACJ,CAAC"},"metadata":{},"sourceType":"module"}