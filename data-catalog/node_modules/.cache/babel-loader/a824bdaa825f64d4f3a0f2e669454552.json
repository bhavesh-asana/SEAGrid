{"ast":null,"code":"import _defineProperty from \"/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from \"axios\";\nimport http from \"http\";\nimport https from \"https\";\nimport CustosGroups from \"./custos-service-groups\";\nimport CustosUsers from \"./custos-service-users\";\nimport CustosIdentity from \"./custos-service-identity\";\nimport CustosTenants from \"./custos-service-tenants\";\nimport CustosSharing from \"./custos-service-sharing\";\nimport CustosEntities from \"./custos-service-entities\";\nconst httpAgent = new http.Agent({\n  keepAlive: true\n});\nconst httpsAgent = new https.Agent({\n  keepAlive: true\n});\nexport default class CustosService {\n  /**\n   * Api Client ID\n   * @type {strong}\n   * @private\n   */\n\n  /**\n   * Api Client Secret\n   * @type {strong}\n   * @private\n   */\n\n  /**\n   * Api Redirect URI\n   * @type {strong}\n   * @private\n   */\n\n  /**\n   * Api Base URL\n   * @type {strong}\n   * @private\n   */\n\n  /**\n   * @type {CustosGroups}\n   */\n\n  /**\n   * @type {CustosTenants}\n   */\n\n  /**\n   * @type {CustosUsers}\n   */\n\n  /**\n   * @type {CustosIdentity}\n   */\n\n  /**\n   * @type {CustosSharing}\n   */\n\n  /**\n   * @type {CustosEntities}\n   */\n\n  constructor({\n    clientId,\n    clientSecret,\n    redirectURI,\n    baseURL\n  }) {\n    _defineProperty(this, \"_clientId\", null);\n    _defineProperty(this, \"_clientSecret\", null);\n    _defineProperty(this, \"_redirectURI\", null);\n    _defineProperty(this, \"_baseURL\", null);\n    _defineProperty(this, \"_groups\", null);\n    _defineProperty(this, \"_tenants\", null);\n    _defineProperty(this, \"_users\", null);\n    _defineProperty(this, \"_identity\", null);\n    _defineProperty(this, \"_sharing\", null);\n    _defineProperty(this, \"_entities\", null);\n    this._clientId = clientId;\n    this._clientSecret = clientSecret;\n    this._redirectURI = redirectURI;\n    this._baseURL = baseURL;\n    this._tenants = new CustosTenants(this);\n    this._groups = new CustosGroups(this);\n    this._users = new CustosUsers(this);\n    this._identity = new CustosIdentity(this);\n    this._sharing = new CustosSharing(this);\n    this._entities = new CustosEntities(this);\n  }\n  get clientId() {\n    return this._clientId;\n  }\n  get clientSecret() {\n    return this._clientSecret;\n  }\n  get redirectURI() {\n    return this._redirectURI;\n  }\n  get baseURL() {\n    return this._baseURL;\n  }\n  get tenants() {\n    return this._tenants;\n  }\n  get groups() {\n    return this._groups;\n  }\n  get users() {\n    return this._users;\n  }\n  get identity() {\n    return this._identity;\n  }\n  get sharing() {\n    return this._sharing;\n  }\n  get entities() {\n    return this._entities;\n  }\n  get axiosInstance() {\n    return axios.create({\n      httpAgent,\n      httpsAgent,\n      baseURL: this.baseURL,\n      withCredentials: false,\n      headers: {\n        'Accept': '*/*',\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  async getAxiosInstanceWithClientAuthorization({\n    clientId = null,\n    clientSecret = null\n  } = {}) {\n    if (!clientId) {\n      clientId = this.clientId;\n    }\n    if (clientId === this.clientId) {\n      clientSecret = this.clientSecret;\n    } else if (!clientSecret) {\n      clientSecret = await this.identity.getClientSecret({\n        clientId\n      });\n    }\n    return axios.create({\n      httpAgent,\n      httpsAgent,\n      baseURL: this.baseURL,\n      withCredentials: false,\n      headers: {\n        'Accept': '*/*',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${btoa(`${clientId}:${clientSecret}`)}`\n      }\n    });\n  }\n  get axiosInstanceWithClientAuthorization() {\n    return this.getAxiosInstanceWithClientAuthorization({\n      clientId: this.clientId,\n      clientSecret: this.clientSecret\n    });\n    // return axios.create({\n    //     httpAgent,\n    //     httpsAgent,\n    //     baseURL: this.baseURL,\n    //     withCredentials: false,\n    //     headers: {\n    //         'Accept': '*/*',\n    //         'Content-Type': 'application/json',\n    //         'Authorization': `Bearer ${btoa(`${this.clientId}:${this.clientSecret}`)}`\n    //     }\n    // });\n  }\n\n  get axiosInstanceWithTokenAuthorization() {\n    const instance = axios.create({\n      httpAgent,\n      httpsAgent,\n      baseURL: this.baseURL,\n      withCredentials: false,\n      headers: {\n        'Accept': '*/*',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.identity.accessToken}`\n      }\n    });\n    instance.interceptors.response.use(response => {\n      return response;\n    }, async error => {\n      const {\n        config,\n        response: {\n          status\n        }\n      } = error;\n      const originalRequest = config;\n      if (status >= 400) {\n        await this.identity.getTokenUsingRefreshToken();\n        originalRequest.headers['Authorization'] = `Bearer ${this.identity.accessToken}`;\n        return axios(originalRequest);\n      } else {\n        return Promise.reject(error);\n      }\n    });\n    return instance;\n  }\n}\n_defineProperty(CustosService, \"ENDPOINTS\", {\n  IDENTITY: \"/identity-management/v1.0.0\",\n  USERS: \"user-management/v1.0.0\",\n  GROUPS: \"group-management/v1.0.0\",\n  TENANTS: \"tenant-management/v1.0.0\",\n  SHARING: \"sharing-management/v1.0.0\",\n  SECRETS: \"resource-secret-management/v1.0.0\"\n});","map":{"version":3,"names":["axios","http","https","CustosGroups","CustosUsers","CustosIdentity","CustosTenants","CustosSharing","CustosEntities","httpAgent","Agent","keepAlive","httpsAgent","CustosService","constructor","clientId","clientSecret","redirectURI","baseURL","_clientId","_clientSecret","_redirectURI","_baseURL","_tenants","_groups","_users","_identity","_sharing","_entities","tenants","groups","users","identity","sharing","entities","axiosInstance","create","withCredentials","headers","getAxiosInstanceWithClientAuthorization","getClientSecret","btoa","axiosInstanceWithClientAuthorization","axiosInstanceWithTokenAuthorization","instance","accessToken","interceptors","response","use","error","config","status","originalRequest","getTokenUsingRefreshToken","Promise","reject","IDENTITY","USERS","GROUPS","TENANTS","SHARING","SECRETS"],"sources":["/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/airavata-custos-portal/src/lib/service/custos-service/index.js"],"sourcesContent":["import axios from \"axios\";\nimport http from \"http\";\nimport https from \"https\";\nimport CustosGroups from \"./custos-service-groups\";\nimport CustosUsers from \"./custos-service-users\";\nimport CustosIdentity from \"./custos-service-identity\";\nimport CustosTenants from \"./custos-service-tenants\";\nimport CustosSharing from \"./custos-service-sharing\";\nimport CustosEntities from \"./custos-service-entities\";\n\nconst httpAgent = new http.Agent({keepAlive: true});\nconst httpsAgent = new https.Agent({keepAlive: true});\n\nexport default class CustosService {\n    static ENDPOINTS = {\n        IDENTITY: \"/identity-management/v1.0.0\",\n        USERS: \"user-management/v1.0.0\",\n        GROUPS: \"group-management/v1.0.0\",\n        TENANTS: \"tenant-management/v1.0.0\",\n        SHARING: \"sharing-management/v1.0.0\",\n        SECRETS: \"resource-secret-management/v1.0.0\"\n    };\n\n    /**\n     * Api Client ID\n     * @type {strong}\n     * @private\n     */\n    _clientId = null;\n\n    /**\n     * Api Client Secret\n     * @type {strong}\n     * @private\n     */\n    _clientSecret = null;\n\n    /**\n     * Api Redirect URI\n     * @type {strong}\n     * @private\n     */\n    _redirectURI = null;\n\n    /**\n     * Api Base URL\n     * @type {strong}\n     * @private\n     */\n    _baseURL = null;\n\n\n    /**\n     * @type {CustosGroups}\n     */\n    _groups = null;\n\n\n    /**\n     * @type {CustosTenants}\n     */\n    _tenants = null;\n\n\n    /**\n     * @type {CustosUsers}\n     */\n    _users = null;\n\n    /**\n     * @type {CustosIdentity}\n     */\n    _identity = null;\n\n    /**\n     * @type {CustosSharing}\n     */\n    _sharing = null;\n\n    /**\n     * @type {CustosEntities}\n     */\n    _entities = null;\n\n    constructor({clientId, clientSecret, redirectURI, baseURL}) {\n        this._clientId = clientId;\n        this._clientSecret = clientSecret;\n        this._redirectURI = redirectURI;\n        this._baseURL = baseURL;\n        this._tenants = new CustosTenants(this);\n        this._groups = new CustosGroups(this);\n        this._users = new CustosUsers(this);\n        this._identity = new CustosIdentity(this);\n        this._sharing = new CustosSharing(this);\n        this._entities = new CustosEntities(this);\n    }\n\n    get clientId() {\n        return this._clientId;\n    }\n\n    get clientSecret() {\n        return this._clientSecret;\n    }\n\n    get redirectURI() {\n        return this._redirectURI;\n    }\n\n    get baseURL() {\n        return this._baseURL;\n    }\n\n    get tenants() {\n        return this._tenants;\n    }\n\n    get groups() {\n        return this._groups;\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    get identity() {\n        return this._identity;\n    }\n\n    get sharing() {\n        return this._sharing;\n    }\n\n    get entities() {\n        return this._entities;\n    }\n\n    get axiosInstance() {\n        return axios.create({\n            httpAgent,\n            httpsAgent,\n            baseURL: this.baseURL,\n            withCredentials: false,\n            headers: {\n                'Accept': '*/*',\n                'Content-Type': 'application/json'\n            }\n        });\n    }\n\n    async getAxiosInstanceWithClientAuthorization({clientId = null, clientSecret = null} = {}) {\n        if (!clientId) {\n            clientId = this.clientId\n        }\n\n        if (clientId === this.clientId) {\n            clientSecret = this.clientSecret;\n        } else if (!clientSecret) {\n            clientSecret = await this.identity.getClientSecret({clientId});\n        }\n\n        return axios.create({\n            httpAgent,\n            httpsAgent,\n            baseURL: this.baseURL,\n            withCredentials: false,\n            headers: {\n                'Accept': '*/*',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${btoa(`${clientId}:${clientSecret}`)}`\n            }\n        });\n    }\n\n    get axiosInstanceWithClientAuthorization() {\n        return this.getAxiosInstanceWithClientAuthorization({clientId: this.clientId, clientSecret: this.clientSecret});\n        // return axios.create({\n        //     httpAgent,\n        //     httpsAgent,\n        //     baseURL: this.baseURL,\n        //     withCredentials: false,\n        //     headers: {\n        //         'Accept': '*/*',\n        //         'Content-Type': 'application/json',\n        //         'Authorization': `Bearer ${btoa(`${this.clientId}:${this.clientSecret}`)}`\n        //     }\n        // });\n    }\n\n    get axiosInstanceWithTokenAuthorization() {\n        const instance = axios.create({\n            httpAgent,\n            httpsAgent,\n            baseURL: this.baseURL,\n            withCredentials: false,\n            headers: {\n                'Accept': '*/*',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.identity.accessToken}`\n            }\n        });\n\n        instance.interceptors.response.use(response => {\n            return response;\n        }, async error => {\n            const {config, response: {status}} = error;\n            const originalRequest = config;\n\n            if (status >= 400) {\n                await this.identity.getTokenUsingRefreshToken();\n                originalRequest.headers['Authorization'] = `Bearer ${this.identity.accessToken}`;\n                return axios(originalRequest);\n            } else {\n                return Promise.reject(error);\n            }\n        });\n\n        return instance;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}