{"ast":null,"code":"import { custosService } from \"../util/custos.util\";\nconst getDefaultState = () => {\n  return {\n    entityMap: {},\n    entityListMap: {}\n  };\n};\nconst state = getDefaultState();\nconst actions = {\n  async fetchEntities({\n    commit\n  }, {\n    clientId,\n    ownerId\n  }) {\n    const params = {\n      clientId,\n      ownerId\n    };\n    const queryString = JSON.stringify(params);\n    const entities = await custosService.entities.getEntities(params);\n    const entityIds = entities.map(({\n      id,\n      type,\n      name,\n      description,\n      parent_id,\n      owner_id,\n      created_at,\n      updated_at,\n      shared_count,\n      full_text,\n      binary_data\n    }) => {\n      commit('SET_ENTITY', {\n        clientId,\n        entityId: id,\n        type,\n        name,\n        description,\n        parentId: parent_id,\n        ownerId: owner_id,\n        createdAt: new Date(parseInt(created_at)).toLocaleString(),\n        updatedAt: new Date(parseInt(updated_at)).toLocaleString(),\n        sharedCount: shared_count,\n        fullText: full_text,\n        binaryData: binary_data\n      });\n      return id;\n    });\n    commit('SET_ENTITY_LIST', {\n      queryString,\n      entityIds\n    });\n  },\n  async fetchEntity({\n    commit\n  }, {\n    clientId,\n    entityId\n  }) {\n    const params = {\n      clientId,\n      entityId\n    };\n    const entity = await custosService.entities.getEntity(params);\n    commit('SET_ENTITY', {\n      clientId,\n      entityId: entity.id,\n      type: entity.type,\n      name: entity.name,\n      description: entity.description,\n      parentId: entity.parent_id,\n      ownerId: entity.owner_id,\n      createdAt: new Date(parseInt(entity.created_at)).toLocaleString(),\n      updatedAt: new Date(parseInt(entity.updated_at)).toLocaleString(),\n      sharedCount: entity.shared_count,\n      fullText: entity.full_text,\n      binaryData: entity.binary_data,\n      metadata: entity.metadata,\n      ext: entity.ext\n    });\n  },\n  async createEntity(obj, {\n    clientId,\n    entityId,\n    parentId,\n    name,\n    description,\n    type,\n    ownerId,\n    fullText,\n    binaryData,\n    secretType,\n    password\n  }) {\n    return await custosService.entities.createEntity({\n      clientId,\n      entityId,\n      parentId,\n      name,\n      description,\n      type,\n      ownerId,\n      fullText,\n      binaryData,\n      secretType,\n      password\n    });\n  },\n  async updateEntity(obj, {\n    clientId,\n    entityId,\n    name,\n    description,\n    type,\n    ownerId,\n    fullText,\n    binaryData\n  }) {\n    await custosService.entities.updateEntity({\n      clientId,\n      entityId,\n      name,\n      description,\n      type,\n      ownerId,\n      fullText,\n      binaryData\n    });\n  },\n  async deleteEntity(obj, {\n    clientId,\n    entityId,\n    name,\n    description,\n    type,\n    ownerId\n  }) {\n    await custosService.entities.deleteEntity({\n      clientId,\n      entityId,\n      name,\n      description,\n      type,\n      ownerId\n    });\n  }\n};\nconst mutations = {\n  SET_ENTITY(state, {\n    clientId,\n    entityId,\n    type,\n    name,\n    description,\n    parentId,\n    ownerId,\n    createdAt,\n    updatedAt,\n    sharedCount,\n    fullText,\n    binaryData,\n    metadata = {},\n    ext = {}\n  }) {\n    state.entityMap = {\n      ...state.entityMap,\n      [entityId]: {\n        clientId,\n        entityId,\n        type,\n        name,\n        description,\n        parentId,\n        ownerId,\n        createdAt,\n        updatedAt,\n        sharedCount,\n        fullText,\n        binaryData,\n        metadata,\n        ext\n      }\n    };\n  },\n  SET_ENTITY_LIST(state, {\n    queryString,\n    entityIds\n  }) {\n    state.entityListMap = {\n      ...state.entityListMap,\n      [queryString]: entityIds\n    };\n  }\n};\nconst getters = {\n  getEntity(state) {\n    return ({\n      entityId\n    }) => {\n      if (state.entityMap[entityId]) {\n        return state.entityMap[entityId];\n      } else {\n        return null;\n      }\n    };\n  },\n  getEntities(state, getters) {\n    return ({\n      clientId,\n      ownerId\n    }) => {\n      const params = {\n        clientId,\n        ownerId\n      };\n      const queryString = JSON.stringify(params);\n      if (state.entityListMap[queryString]) {\n        return state.entityListMap[queryString].map(entityId => getters.getEntity({\n          entityId\n        }));\n      } else {\n        return null;\n      }\n    };\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["custosService","getDefaultState","entityMap","entityListMap","state","actions","fetchEntities","commit","clientId","ownerId","params","queryString","JSON","stringify","entities","getEntities","entityIds","map","id","type","name","description","parent_id","owner_id","created_at","updated_at","shared_count","full_text","binary_data","entityId","parentId","createdAt","Date","parseInt","toLocaleString","updatedAt","sharedCount","fullText","binaryData","fetchEntity","entity","getEntity","metadata","ext","createEntity","obj","secretType","password","updateEntity","deleteEntity","mutations","SET_ENTITY","SET_ENTITY_LIST","getters","namespaced"],"sources":["/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/airavata-custos-portal/src/lib/store/modules/entity.store.js"],"sourcesContent":["import {custosService} from \"../util/custos.util\";\n\nconst getDefaultState = () => {\n    return {\n        entityMap: {},\n        entityListMap: {}\n    }\n};\n\nconst state = getDefaultState();\n\nconst actions = {\n    async fetchEntities({commit}, {clientId, ownerId}) {\n        const params = {clientId, ownerId};\n        const queryString = JSON.stringify(params);\n        const entities = await custosService.entities.getEntities(params);\n        const entityIds = entities.map(({id, type, name, description, parent_id, owner_id, created_at, updated_at, shared_count, full_text, binary_data}) => {\n            commit('SET_ENTITY', {\n                clientId,\n                entityId: id,\n                type,\n                name,\n                description,\n                parentId: parent_id,\n                ownerId: owner_id,\n                createdAt: new Date(parseInt(created_at)).toLocaleString(),\n                updatedAt: new Date(parseInt(updated_at)).toLocaleString(),\n                sharedCount: shared_count,\n                fullText: full_text,\n                binaryData: binary_data\n            });\n\n            return id;\n        });\n\n        commit('SET_ENTITY_LIST', {queryString, entityIds});\n    },\n    async fetchEntity({commit}, {clientId, entityId}) {\n        const params = {clientId, entityId};\n        const entity = await custosService.entities.getEntity(params);\n        commit('SET_ENTITY', {\n            clientId,\n            entityId: entity.id,\n            type: entity.type,\n            name: entity.name,\n            description: entity.description,\n            parentId: entity.parent_id,\n            ownerId: entity.owner_id,\n            createdAt: new Date(parseInt(entity.created_at)).toLocaleString(),\n            updatedAt: new Date(parseInt(entity.updated_at)).toLocaleString(),\n            sharedCount: entity.shared_count,\n            fullText: entity.full_text,\n            binaryData: entity.binary_data,\n            metadata: entity.metadata,\n            ext: entity.ext\n        });\n    },\n    async createEntity(obj, {clientId, entityId, parentId, name, description, type, ownerId, fullText, binaryData, secretType, password}) {\n        return await custosService.entities.createEntity({\n            clientId, entityId, parentId, name, description, type, ownerId, fullText, binaryData, secretType, password\n        });\n    },\n    async updateEntity(obj, {clientId, entityId, name, description, type, ownerId, fullText, binaryData}) {\n        await custosService.entities.updateEntity({\n            clientId, entityId, name, description, type, ownerId, fullText, binaryData\n        });\n    },\n    async deleteEntity(obj, {clientId, entityId, name, description, type, ownerId}) {\n        await custosService.entities.deleteEntity({clientId, entityId, name, description, type, ownerId});\n    },\n}\n\nconst mutations = {\n    SET_ENTITY(state, {clientId, entityId, type, name, description, parentId, ownerId, createdAt, updatedAt, sharedCount, fullText, binaryData, metadata = {}, ext = {}}) {\n        state.entityMap = {\n            ...state.entityMap,\n            [entityId]: {\n                clientId,\n                entityId,\n                type,\n                name,\n                description,\n                parentId,\n                ownerId,\n                createdAt,\n                updatedAt,\n                sharedCount,\n                fullText,\n                binaryData,\n                metadata,\n                ext\n            }\n        };\n    },\n    SET_ENTITY_LIST(state, {queryString, entityIds}) {\n        state.entityListMap = {\n            ...state.entityListMap,\n            [queryString]: entityIds\n        };\n    }\n}\n\nconst getters = {\n    getEntity(state) {\n        return ({entityId}) => {\n            if (state.entityMap[entityId]) {\n                return state.entityMap[entityId];\n            } else {\n                return null;\n            }\n        }\n    },\n    getEntities(state, getters) {\n        return ({clientId, ownerId}) => {\n            const params = {clientId, ownerId};\n            const queryString = JSON.stringify(params);\n            if (state.entityListMap[queryString]) {\n                return state.entityListMap[queryString].map(entityId => getters.getEntity({entityId}));\n            } else {\n                return null;\n            }\n        }\n    },\n}\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}