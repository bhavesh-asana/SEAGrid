{"ast":null,"code":"import { custosService } from \"../util/custos.util\";\nconst getDefaultState = () => {\n  return {\n    groupMap: {},\n    groupListMap: {},\n    groupUserListMap: {}\n  };\n};\nconst state = getDefaultState();\nconst actions = {\n  async createGroup({\n    commit\n  }, {\n    clientId,\n    name,\n    description,\n    ownerId,\n    realm_roles,\n    client_roles,\n    attributes,\n    sub_groups\n  }) {\n    const {\n      id\n    } = await custosService.groups.createGroup({\n      clientId,\n      name,\n      description,\n      ownerId,\n      realm_roles,\n      client_roles,\n      attributes,\n      sub_groups\n    });\n    commit('SET_GROUP', {\n      groupId: id,\n      name,\n      description,\n      ownerId,\n      realm_roles,\n      client_roles,\n      attributes,\n      sub_groups\n    });\n    return id;\n  },\n  async fetchGroups({\n    commit\n  }, {\n    offset = 0,\n    limit = 50,\n    groupId = null,\n    tenantId = null,\n    clientId = null,\n    username\n  } = {}) {\n    // await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // TODO enable api filtering, pagination, etc.\n    let queryString = JSON.stringify({\n      offset,\n      limit,\n      groupId,\n      tenantId,\n      clientId,\n      username\n    });\n    let {\n      data: {\n        groups\n      }\n    } = await custosService.groups.getAllGroups({\n      offset,\n      limit,\n      groupId,\n      tenantId,\n      clientId,\n      username\n    });\n    const groupIds = groups.map(({\n      id,\n      name,\n      description,\n      owner_id,\n      realm_roles,\n      client_roles,\n      attributes,\n      sub_groups\n    }) => {\n      const groupId = id;\n      commit('SET_GROUP', {\n        groupId,\n        name,\n        description,\n        ownerId: owner_id,\n        realm_roles,\n        client_roles,\n        attributes,\n        sub_groups\n      });\n      return groupId;\n    });\n    commit('SET_GROUP_LIST', {\n      queryString,\n      groupIds\n    });\n  },\n  async updateGroup({\n    commit\n  }, {\n    groupId,\n    name,\n    description,\n    ownerId,\n    realm_roles,\n    client_roles,\n    attributes,\n    sub_groups\n  }) {\n    await custosService.groups.updateGroup({\n      groupId,\n      name,\n      description,\n      ownerId,\n      realm_roles,\n      client_roles,\n      attributes,\n      sub_groups\n    });\n    commit('SET_GROUP', {\n      groupId,\n      name,\n      description,\n      ownerId,\n      realm_roles,\n      client_roles,\n      attributes,\n      sub_groups\n    });\n  },\n  async deleteGroup({\n    commit\n  }, {\n    clientId,\n    groupId\n  }) {\n    await custosService.groups.deleteGroup({\n      clientId,\n      groupId\n    });\n    commit('SET_GROUP_DELETED', {\n      groupId\n    });\n  },\n  async fetchGroup({\n    commit\n  }, {\n    clientId,\n    groupId\n  }) {\n    const {\n      name,\n      description,\n      ownerId,\n      realm_roles,\n      client_roles,\n      attributes,\n      sub_groups\n    } = await custosService.groups.findGroup({\n      clientId,\n      groupId\n    });\n    commit('SET_GROUP', {\n      groupId,\n      name,\n      description,\n      ownerId,\n      realm_roles,\n      client_roles,\n      attributes,\n      sub_groups\n    });\n  },\n  async addUserToGroup(obj, {\n    clientId,\n    groupId,\n    username,\n    membershipType\n  }) {\n    await custosService.groups.addUserToGroup({\n      clientId,\n      groupId,\n      username,\n      membershipType\n    });\n  },\n  async removeUserFromGroup(obj, {\n    clientId,\n    groupId,\n    username\n  }) {\n    let response = await custosService.groups.removeUserFromGroup({\n      clientId,\n      groupId,\n      username\n    });\n    return response.data;\n  },\n  // async addChildGroup(obj, data) {\n  //     let response = await custosService.groups.addChildGroup(data)\n  //     return response.data\n  // },\n  //\n  // async removeChildGroup(obj, data) {\n  //     let response = await custosService.groups.removeChildGroup(data)\n  //     return response.data\n  // },\n  //\n  async changeGroupMembership(obj, {\n    groupId,\n    username,\n    membershipType\n  }) {\n    let response = await custosService.groups.changeGroupMembership({\n      groupId,\n      username,\n      membershipType\n    });\n    return response.data;\n  },\n  //\n  // async getAllChildUsers(obj, {groupId}) {\n  //     let response = await custosService.groups.getAllChildUsers({groupId})\n  //     return response.data\n  // },\n\n  // async getAllChildGroups(obj, data) {\n  //     let response = await custosService.groups.getAllChildGroups(data)\n  //     return response.data\n  // },\n\n  // async getAllGroupsOfUser(obj, data) {\n  //     let response = await custosService.groups.getAllGroupsOfUser(data)\n  //     return response.data.groups\n  // },\n  //\n  // async getAllParentGroups(obj, data) {\n  //     let response = await custosService.groups.getAllParentGroupsOfGroup(data)\n  //     return response.data.groups\n  // },\n\n  async hasAccess(obj, data) {\n    let response = await custosService.groups.hasAccess(data);\n    return response.data;\n  }\n};\nconst mutations = {\n  SET_GROUP(state, {\n    groupId,\n    name,\n    description,\n    ownerId,\n    realm_roles,\n    client_roles,\n    attributes,\n    sub_groups\n  }) {\n    state.groupMap = {\n      ...state.groupMap,\n      [groupId]: {\n        groupId,\n        name,\n        description,\n        ownerId,\n        realm_roles,\n        client_roles,\n        attributes,\n        sub_groups\n      }\n    };\n  },\n  SET_GROUP_DELETED(state, {\n    groupId\n  }) {\n    for (let queryString in state.groupListMap) {\n      state.groupListMap = {\n        ...state.groupListMap,\n        [queryString]: state.groupListMap[queryString].filter(_groupId => _groupId !== groupId)\n      };\n    }\n    state.groupMap = {\n      ...state.groupMap,\n      [groupId]: null\n    };\n  },\n  SET_GROUP_LIST(state, {\n    queryString,\n    groupIds\n  }) {\n    // TODO remove\n    groupIds = groupIds.filter(groupId => {\n      return [\"89dc135b-9ee0-4d5f-8ef1-dc8277f86721\", \"a3e2d7a0-3f33-41c6-ab92-f37e16a6bd26\"].indexOf(groupId) < 0;\n    });\n    state.groupListMap = {\n      [queryString]: groupIds\n    };\n  }\n};\nconst getters = {\n  getGroups(state, getters) {\n    return ({\n      offset = 0,\n      limit = 50,\n      groupId = null,\n      tenantId = null,\n      clientId = null,\n      username\n    } = {}) => {\n      const queryString = JSON.stringify({\n        offset,\n        limit,\n        groupId,\n        tenantId,\n        clientId,\n        username\n      });\n      if (state.groupListMap[queryString]) {\n        return state.groupListMap[queryString].map(groupId => getters.getGroup({\n          groupId\n        }));\n      } else {\n        return null;\n      }\n    };\n  },\n  getGroup(state) {\n    return ({\n      groupId\n    }) => {\n      if (state.groupMap[groupId]) {\n        return state.groupMap[groupId];\n      } else {\n        return null;\n      }\n    };\n  },\n  getGroupUsers(state) {\n    return ({\n      groupId\n    }) => {\n      if (state.groupUserListMap[groupId]) {\n        return state.groupUserListMap[groupId];\n      } else {\n        return null;\n      }\n    };\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["custosService","getDefaultState","groupMap","groupListMap","groupUserListMap","state","actions","createGroup","commit","clientId","name","description","ownerId","realm_roles","client_roles","attributes","sub_groups","id","groups","groupId","fetchGroups","offset","limit","tenantId","username","queryString","JSON","stringify","data","getAllGroups","groupIds","map","owner_id","updateGroup","deleteGroup","fetchGroup","findGroup","addUserToGroup","obj","membershipType","removeUserFromGroup","response","changeGroupMembership","hasAccess","mutations","SET_GROUP","SET_GROUP_DELETED","filter","_groupId","SET_GROUP_LIST","indexOf","getters","getGroups","getGroup","getGroupUsers","namespaced"],"sources":["/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/airavata-custos-portal/src/lib/store/modules/group.store.js"],"sourcesContent":["import {custosService} from \"../util/custos.util\";\n\nconst getDefaultState = () => {\n    return {\n        groupMap: {},\n        groupListMap: {},\n        groupUserListMap: {}\n    }\n};\n\nconst state = getDefaultState();\n\nconst actions = {\n    async createGroup({commit}, {clientId, name, description, ownerId, realm_roles, client_roles, attributes, sub_groups}) {\n        const {id} = await custosService.groups.createGroup({\n            clientId, name, description, ownerId, realm_roles, client_roles, attributes, sub_groups\n        });\n\n        commit('SET_GROUP', {\n            groupId: id,\n            name,\n            description,\n            ownerId,\n            realm_roles,\n            client_roles,\n            attributes,\n            sub_groups\n        });\n\n        return id;\n    },\n    async fetchGroups({commit}, {offset = 0, limit = 50, groupId = null, tenantId = null, clientId = null, username} = {}) {\n\n        // await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // TODO enable api filtering, pagination, etc.\n        let queryString = JSON.stringify({offset, limit, groupId, tenantId, clientId, username});\n\n        let {data: {groups}} = await custosService.groups.getAllGroups({offset, limit, groupId, tenantId, clientId, username});\n        const groupIds = groups.map((\n            {id, name, description, owner_id, realm_roles, client_roles, attributes, sub_groups}\n        ) => {\n            const groupId = id\n            commit('SET_GROUP', {\n                groupId, name, description, ownerId: owner_id, realm_roles, client_roles, attributes, sub_groups\n            });\n\n            return groupId;\n        });\n        commit('SET_GROUP_LIST', {queryString, groupIds});\n    },\n\n\n    async updateGroup({commit}, {\n        groupId, name, description, ownerId, realm_roles, client_roles, attributes, sub_groups\n    }) {\n        await custosService.groups.updateGroup({\n            groupId, name, description, ownerId, realm_roles, client_roles, attributes, sub_groups\n        });\n        commit('SET_GROUP', {groupId, name, description, ownerId, realm_roles, client_roles, attributes, sub_groups});\n    },\n\n    async deleteGroup({commit}, {clientId, groupId}) {\n        await custosService.groups.deleteGroup({clientId, groupId});\n        commit('SET_GROUP_DELETED', {groupId});\n    },\n\n    async fetchGroup({commit}, {clientId, groupId}) {\n        const {\n            name, description, ownerId, realm_roles, client_roles, attributes, sub_groups\n        } = await custosService.groups.findGroup({clientId, groupId});\n        commit('SET_GROUP', {groupId, name, description, ownerId, realm_roles, client_roles, attributes, sub_groups});\n    },\n\n    async addUserToGroup(obj, {clientId, groupId, username, membershipType}) {\n        await custosService.groups.addUserToGroup({clientId, groupId, username, membershipType});\n    },\n\n    async removeUserFromGroup(obj, {clientId, groupId, username}) {\n        let response = await custosService.groups.removeUserFromGroup({clientId, groupId, username})\n        return response.data\n    },\n\n    // async addChildGroup(obj, data) {\n    //     let response = await custosService.groups.addChildGroup(data)\n    //     return response.data\n    // },\n    //\n    // async removeChildGroup(obj, data) {\n    //     let response = await custosService.groups.removeChildGroup(data)\n    //     return response.data\n    // },\n    //\n    async changeGroupMembership(obj, {groupId, username, membershipType}) {\n        let response = await custosService.groups.changeGroupMembership({groupId, username, membershipType})\n        return response.data\n    },\n    //\n    // async getAllChildUsers(obj, {groupId}) {\n    //     let response = await custosService.groups.getAllChildUsers({groupId})\n    //     return response.data\n    // },\n\n    // async getAllChildGroups(obj, data) {\n    //     let response = await custosService.groups.getAllChildGroups(data)\n    //     return response.data\n    // },\n\n    // async getAllGroupsOfUser(obj, data) {\n    //     let response = await custosService.groups.getAllGroupsOfUser(data)\n    //     return response.data.groups\n    // },\n    //\n    // async getAllParentGroups(obj, data) {\n    //     let response = await custosService.groups.getAllParentGroupsOfGroup(data)\n    //     return response.data.groups\n    // },\n\n    async hasAccess(obj, data) {\n        let response = await custosService.groups.hasAccess(data)\n        return response.data\n    }\n}\n\nconst mutations = {\n    SET_GROUP(state, {groupId, name, description, ownerId, realm_roles, client_roles, attributes, sub_groups}) {\n        state.groupMap = {\n            ...state.groupMap,\n            [groupId]: {groupId, name, description, ownerId, realm_roles, client_roles, attributes, sub_groups}\n        };\n    },\n    SET_GROUP_DELETED(state, {groupId}) {\n        for (let queryString in state.groupListMap) {\n            state.groupListMap = {\n                ...state.groupListMap,\n                [queryString]: state.groupListMap[queryString].filter(_groupId => _groupId !== groupId)\n            }\n        }\n\n        state.groupMap = {\n            ...state.groupMap,\n            [groupId]: null\n        };\n    },\n    SET_GROUP_LIST(state, {queryString, groupIds}) {\n        // TODO remove\n        groupIds = groupIds.filter(groupId => {\n            return [\"89dc135b-9ee0-4d5f-8ef1-dc8277f86721\", \"a3e2d7a0-3f33-41c6-ab92-f37e16a6bd26\"].indexOf(groupId) < 0;\n        })\n\n        state.groupListMap = {\n            [queryString]: groupIds\n        }\n    }\n}\n\nconst getters = {\n    getGroups(state, getters) {\n        return ({offset = 0, limit = 50, groupId = null, tenantId = null, clientId = null, username} = {}) => {\n            const queryString = JSON.stringify({offset, limit, groupId, tenantId, clientId, username});\n            if (state.groupListMap[queryString]) {\n                return state.groupListMap[queryString].map(groupId => getters.getGroup({groupId}));\n            } else {\n                return null;\n            }\n        }\n    },\n    getGroup(state) {\n        return ({groupId}) => {\n            if (state.groupMap[groupId]) {\n                return state.groupMap[groupId];\n            } else {\n                return null;\n            }\n        }\n    },\n    getGroupUsers(state) {\n        return ({groupId}) => {\n            if (state.groupUserListMap[groupId]) {\n                return state.groupUserListMap[groupId];\n            } else {\n                return null;\n            }\n        }\n    }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}