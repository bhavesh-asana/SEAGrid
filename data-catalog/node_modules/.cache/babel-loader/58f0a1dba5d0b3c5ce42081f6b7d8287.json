{"ast":null,"code":"import _defineProperty from \"/Users/bhavesh/Developer/SEAGrid/data-catalog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport CustosService from \"./index\";\nexport default class CustosSharing {\n  /**\n   * @type {CustosService}\n   */\n\n  constructor(custosService) {\n    _defineProperty(this, \"_custosService\", null);\n    this._custosService = custosService;\n  }\n  get custosService() {\n    return this._custosService;\n  }\n  async createPermissionType({\n    clientId,\n    id,\n    name,\n    description = null\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.post(`${CustosService.ENDPOINTS.SHARING}/permission/type`, {\n      \"client_id\": clientId,\n      \"permission_type\": {\n        id,\n        name,\n        description\n      }\n    });\n  }\n  async deletePermissionType({\n    clientId,\n    id,\n    name,\n    description = null\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.delete(`${CustosService.ENDPOINTS.SHARING}/permission/type`, {\n      data: {\n        \"client_id\": clientId,\n        \"permission_type\": {\n          id,\n          name,\n          description\n        }\n      }\n    });\n  }\n  async getPermissionTypes({\n    clientId\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.get(`${CustosService.ENDPOINTS.SHARING}/permission/types`, {\n      params: {\n        \"client_id\": clientId\n      }\n    }).then(({\n      data: {\n        types\n      }\n    }) => types);\n  }\n  async createEntityType({\n    clientId,\n    id,\n    name,\n    description = null\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.post(`${CustosService.ENDPOINTS.SHARING}/entity/type`, {\n      \"client_id\": clientId,\n      \"entity_type\": {\n        id,\n        name,\n        description\n      }\n    });\n  }\n  async deleteEntityType({\n    clientId,\n    id,\n    name,\n    description = null\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.delete(`${CustosService.ENDPOINTS.SHARING}/entity/type`, {\n      data: {\n        \"client_id\": clientId,\n        \"entity_type\": {\n          id,\n          name,\n          description\n        }\n      }\n    });\n  }\n  async getEntityTypes({\n    clientId\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.get(`${CustosService.ENDPOINTS.SHARING}/entity/types`, {\n      params: {\n        \"client_id\": clientId\n      }\n    }).then(({\n      data: {\n        types\n      }\n    }) => types);\n  }\n  async getSharedOwners({\n    clientId,\n    entityId\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    const res = await axiosInstance.get(`${CustosService.ENDPOINTS.SHARING}/share`, {\n      params: {\n        \"entity.id\": entityId\n      }\n    }).then(({\n      data: {\n        shared_data\n      }\n    }) => shared_data);\n    return res;\n  }\n  async shareEntity({\n    clientId,\n    entityId,\n    permissionTypeId,\n    groupIds = [],\n    usernames = [],\n    sharedBy\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    let promises = [];\n    promises.concat(groupIds.map(groupId => {\n      return axiosInstance.post(`${CustosService.ENDPOINTS.SHARING}/groups/share`, {\n        \"client_id\": clientId,\n        \"entity\": {\n          \"id\": entityId\n        },\n        \"permission_type\": {\n          \"id\": permissionTypeId\n        },\n        \"owner_id\": [groupId],\n        \"cascade\": true,\n        \"shared_by\": sharedBy\n      });\n    }));\n    promises.concat(usernames.map(username => {\n      return axiosInstance.post(`${CustosService.ENDPOINTS.SHARING}/users/share`, {\n        \"client_id\": clientId,\n        \"entity\": {\n          \"id\": entityId\n        },\n        \"permission_type\": {\n          \"id\": permissionTypeId\n        },\n        \"owner_id\": [username],\n        \"cascade\": true,\n        \"shared_by\": sharedBy\n      });\n    }));\n    await Promise.all(promises);\n  }\n  async dropEntitySharedOwner({\n    clientId,\n    entityId,\n    permissionTypeId,\n    groupIds = [],\n    usernames = []\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    let promises = [];\n    promises.concat(groupIds.map(groupId => {\n      return axiosInstance.delete(`${CustosService.ENDPOINTS.SHARING}/groups/share`, {\n        data: {\n          \"client_id\": clientId,\n          \"entity\": {\n            \"id\": entityId\n          },\n          \"permission_type\": {\n            \"id\": permissionTypeId\n          },\n          \"owner_id\": [groupId],\n          \"cascade\": true\n        }\n      });\n    }));\n    promises.concat(usernames.map(username => {\n      return axiosInstance.delete(`${CustosService.ENDPOINTS.SHARING}/users/share`, {\n        data: {\n          \"client_id\": clientId,\n          \"entity\": {\n            \"id\": entityId\n          },\n          \"permission_type\": {\n            \"id\": permissionTypeId\n          },\n          \"owner_id\": [username],\n          \"cascade\": true\n        }\n      });\n    }));\n    await Promise.all(promises);\n  }\n  async userHasAccess({\n    clientId,\n    entityId,\n    permissionTypeId,\n    username\n  }) {\n    // let authHeader = {'Authorization': 'Bearer ' + btoa(data.client_id + ':' + data.client_sec)}\n    // let endpoint = sharingMgtEndpoint + \"/entity/user/access\"\n    // return api().get(endpoint, {\n    //     params: data.params,\n    //     headers: authHeader\n    // });\n\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.get(`${CustosService.ENDPOINTS.SHARING}/entity/user/access`, {\n      params: {\n        \"client_id\": clientId,\n        \"entity.id\": entityId,\n        \"permission_type.id\": permissionTypeId,\n        \"owner_id\": username\n      }\n    }).then(({\n      data: {\n        status\n      }\n    }) => status);\n  }\n}","map":{"version":3,"names":["CustosService","CustosSharing","constructor","custosService","_custosService","createPermissionType","clientId","id","name","description","axiosInstance","getAxiosInstanceWithClientAuthorization","post","ENDPOINTS","SHARING","deletePermissionType","delete","data","getPermissionTypes","get","params","then","types","createEntityType","deleteEntityType","getEntityTypes","getSharedOwners","entityId","res","shared_data","shareEntity","permissionTypeId","groupIds","usernames","sharedBy","promises","concat","map","groupId","username","Promise","all","dropEntitySharedOwner","userHasAccess","status"],"sources":["/Users/bhavesh/Developer/SEAGrid/data-catalog/node_modules/airavata-custos-portal/src/lib/service/custos-service/custos-service-sharing.js"],"sourcesContent":["import CustosService from \"./index\";\n\nexport default class CustosSharing {\n    /**\n     * @type {CustosService}\n     */\n    _custosService = null;\n\n    constructor(custosService) {\n        this._custosService = custosService;\n    }\n\n    get custosService() {\n        return this._custosService;\n    }\n\n    async createPermissionType({clientId, id, name, description = null}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.SHARING}/permission/type`,\n            {\n                \"client_id\": clientId,\n                \"permission_type\": {id, name, description}\n            }\n        );\n    }\n\n    async deletePermissionType({clientId, id, name, description = null}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.delete(\n            `${CustosService.ENDPOINTS.SHARING}/permission/type`,\n            {\n                data: {\n                    \"client_id\": clientId,\n                    \"permission_type\": {id, name, description}\n                }\n            }\n        );\n    }\n\n    async getPermissionTypes({clientId}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.get(\n            `${CustosService.ENDPOINTS.SHARING}/permission/types`,\n            {\n                params: {\"client_id\": clientId}\n            }\n        ).then(({data: {types}}) => types);\n    }\n\n    async createEntityType({clientId, id, name, description = null}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.SHARING}/entity/type`,\n            {\n                \"client_id\": clientId,\n                \"entity_type\": {id, name, description}\n            }\n        );\n    }\n\n    async deleteEntityType({clientId, id, name, description = null}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.delete(\n            `${CustosService.ENDPOINTS.SHARING}/entity/type`,\n            {\n                data: {\n                    \"client_id\": clientId,\n                    \"entity_type\": {id, name, description}\n                }\n            }\n        );\n    }\n\n    async getEntityTypes({clientId}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.get(\n            `${CustosService.ENDPOINTS.SHARING}/entity/types`,\n            {\n                params: {\"client_id\": clientId}\n            }\n        ).then(({data: {types}}) => types);\n    }\n\n    async getSharedOwners({clientId, entityId}) {\n\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n\n        const res = await axiosInstance.get(\n            `${CustosService.ENDPOINTS.SHARING}/share`,\n            {\n                params: {\n                    \"entity.id\": entityId\n                }\n            }\n        ).then(({data: {shared_data}}) => shared_data);\n\n        return res;\n    }\n\n    async shareEntity({clientId, entityId, permissionTypeId, groupIds = [], usernames = [], sharedBy}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n\n        let promises = [];\n\n        promises.concat(groupIds.map(groupId => {\n            return axiosInstance.post(\n                `${CustosService.ENDPOINTS.SHARING}/groups/share`,\n                {\n                    \"client_id\": clientId,\n                    \"entity\": {\"id\": entityId},\n                    \"permission_type\": {\"id\": permissionTypeId},\n                    \"owner_id\": [groupId],\n                    \"cascade\": true,\n                    \"shared_by\": sharedBy\n                }\n            );\n        }));\n\n        promises.concat(usernames.map(username => {\n            return axiosInstance.post(\n                `${CustosService.ENDPOINTS.SHARING}/users/share`,\n                {\n                    \"client_id\": clientId,\n                    \"entity\": {\"id\": entityId},\n                    \"permission_type\": {\"id\": permissionTypeId},\n                    \"owner_id\": [username],\n                    \"cascade\": true,\n                    \"shared_by\": sharedBy\n                }\n            );\n        }));\n\n        await Promise.all(promises);\n    }\n\n    async dropEntitySharedOwner({clientId, entityId, permissionTypeId, groupIds = [], usernames = []}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n\n        let promises = [];\n\n        promises.concat(groupIds.map(groupId => {\n            return axiosInstance.delete(\n                `${CustosService.ENDPOINTS.SHARING}/groups/share`,\n                {\n                    data: {\n                        \"client_id\": clientId,\n                        \"entity\": {\"id\": entityId},\n                        \"permission_type\": {\"id\": permissionTypeId},\n                        \"owner_id\": [groupId],\n                        \"cascade\": true\n                    }\n                }\n            );\n        }));\n\n        promises.concat(usernames.map(username => {\n            return axiosInstance.delete(\n                `${CustosService.ENDPOINTS.SHARING}/users/share`,\n                {\n                    data: {\n                        \"client_id\": clientId,\n                        \"entity\": {\"id\": entityId},\n                        \"permission_type\": {\"id\": permissionTypeId},\n                        \"owner_id\": [username],\n                        \"cascade\": true\n                    }\n                }\n            );\n        }));\n\n        await Promise.all(promises);\n    }\n\n    async userHasAccess({clientId, entityId, permissionTypeId, username}) {\n        // let authHeader = {'Authorization': 'Bearer ' + btoa(data.client_id + ':' + data.client_sec)}\n        // let endpoint = sharingMgtEndpoint + \"/entity/user/access\"\n        // return api().get(endpoint, {\n        //     params: data.params,\n        //     headers: authHeader\n        // });\n\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.get(\n            `${CustosService.ENDPOINTS.SHARING}/entity/user/access`,\n            {\n                params: {\n                    \"client_id\": clientId,\n                    \"entity.id\": entityId,\n                    \"permission_type.id\": permissionTypeId,\n                    \"owner_id\": username\n                }\n            }\n        ).then(({data: {status}}) => status);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}