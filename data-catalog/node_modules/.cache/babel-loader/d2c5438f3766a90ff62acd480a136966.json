{"ast":null,"code":"import AppHeader from \"@/components/AppHeader\";\nimport axios from \"axios\";\nimport DataSheet from \"@/pages/DataSheet\";\nimport AccountInfo from \"@/pages/AccountInfo\";\nexport default {\n  name: \"SearchPage\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: {\n    AccountInfo,\n    DataSheet,\n    AppHeader\n  },\n  data() {\n    return {\n      input1: \"\",\n      input1state: null,\n      input2: \"\",\n      input2state: null,\n      options: [{\n        text: \"- Choose 1 -\",\n        value: \"\"\n      }, \"Molecule Name\", \"Emperical Formula\", \"Year of Publication\"],\n      input1Return: \"\",\n      input2Return: \"\",\n      popoverShow: false,\n      dataMsg: \"From Master\",\n      perPage: 15,\n      currentPage: 1,\n      displayCategory: false,\n      selected: \"vghjv\",\n      sub_drop: \"\",\n      subDrop: [],\n      selectedFilter: {},\n      sub_drop_values: {\n        rdb: [{\n          key: \"less\"\n        }, {\n          key: \"greater\"\n        }, {\n          key: \"equals\"\n        }],\n        absorb: [{\n          key: \"less\"\n        }]\n      },\n      fields: [{\n        key: \"molecule_id\",\n        sortable: true\n      }, {\n        key: \"molecule_name\",\n        sortable: true\n      }, {\n        key: \"jour_cit\"\n      }, {\n        key: \"mw_source\",\n        sortable: true\n      }, {\n        key: \"absorb\",\n        sortable: true\n      }, {\n        key: \"journal\"\n      }, {\n        key: \"lifetime\"\n      }, {\n        key: \"emp_formula_sort\"\n      }, {\n        key: \"year_publ\"\n      }],\n      items: [],\n      filter: null,\n      filterOn: [],\n      filterOn2: []\n    };\n  },\n  async created() {\n    try {\n      const res = await axios.get(`http://127.0.0.1:8000/api/molecule/`);\n      this.items = res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  watch: {\n    input1(val) {\n      if (val) {\n        this.input1state = true;\n      }\n    },\n    input2(val) {\n      if (val) {\n        this.input2state = true;\n      }\n    }\n  },\n  computed: {\n    rows() {\n      return this.items.length;\n    },\n    filteredItems() {\n      return this.filterOn.length;\n    }\n  },\n  methods: {\n    onChange(event) {\n      this.subDrop = this.sub_drop_values[event.target.value];\n    },\n    onFiltered(filteredItems) {\n      // Trigger pagination to update the number of buttons/pages due to filtering\n      this.totalRows = filteredItems.length;\n      this.currentPage = 1;\n    },\n    onClose() {\n      this.popoverShow = false;\n    },\n    onOk() {\n      if (!this.input1) {\n        this.input1state = false;\n      }\n      if (!this.input2) {\n        this.input2state = false;\n      }\n      if (this.input1 && this.input2) {\n        this.onClose();\n        // Return our popover form results\n        this.input1Return = this.input1;\n        this.input2Return = this.input2;\n      }\n    },\n    onShow() {\n      // This is called just before the popover is shown\n      // Reset our popover form variables\n      this.input1 = \"\";\n      this.input2 = \"\";\n      this.input1state = null;\n      this.input2state = null;\n      this.input1Return = \"\";\n      this.input2Return = \"\";\n    },\n    onShown() {\n      // Called just after the popover has been shown\n      // Transfer focus to the first input\n      this.focusRef(this.$refs.input1);\n    },\n    onHidden() {\n      // Called just after the popover has finished hiding\n      // Bring focus back to the button\n      this.focusRef(this.$refs.button);\n    },\n    focusRef(ref) {\n      // Some references may be a component, functional component, or plain element\n      // This handles that check before focusing, assuming a `focus()` method exists\n      // We do this in a double `$nextTick()` to ensure components have\n      // updated & popover positioned first\n      this.$nextTick(() => {\n        this.$nextTick(() => {\n          (ref.$el || ref).focus();\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAyLA;AACA;AACA;AACA;AAEA;EACAA;EACA;EACAC;IAAAC;IAAAC;IAAAC;EAAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QAAAC;QAAAC;MAAA;MACAC;MACAC;MACAC;MAEAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;UAAAC;QAAA;UAAAA;QAAA;UAAAA;QAAA;QAEAC;UAAAD;QAAA;MACA;MAEAE,SACA;QACAF;QACAG;MACA,GACA;QACAH;QACAG;MACA,GACA;QACAH;MACA,GAEA;QACAA;QACAG;MACA,GACA;QACAH;QACAG;MACA,GACA;QACAH;MACA,GACA;QACAA;MACA,GACA;QACAA;MACA,GACA;QACAA;MACA,EACA;MACAI;MACAC;MACAC;MACAC;IACA;EACA;EAEA;IACA;MACA;MACA;IACA;MACAC;IACA;EACA;EACAC;IACA7B;MACA;QACA;MACA;IACA;IACAE;MACA;QACA;MACA;IACA;EACA;EACA4B;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;QACA;MACA;MACA;QACA;MACA;MACA;QACA;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;QACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","components","AccountInfo","DataSheet","AppHeader","data","input1","input1state","input2","input2state","options","text","value","input1Return","input2Return","popoverShow","dataMsg","perPage","currentPage","displayCategory","selected","sub_drop","subDrop","selectedFilter","sub_drop_values","rdb","key","absorb","fields","sortable","items","filter","filterOn","filterOn2","console","watch","computed","rows","filteredItems","methods","onChange","onFiltered","onClose","onOk","onShow","onShown","onHidden","focusRef"],"sourceRoot":"src/pages","sources":["SearchPage.vue"],"sourcesContent":["<template>\n    <div>\n        <AppHeader />\n        <div class=\"filter-container\">\n            <div>\n                <input id=\"option1\" autocomplete=\"off\" checked class=\"btn-check\" name=\"options\" type=\"radio\" />\n                <label class=\"btn btn-secondary btn-sm\" for=\"option1\">AND</label>\n\n                <input id=\"option2\" autocomplete=\"off\" class=\"btn-check\" name=\"options\" type=\"radio\" />\n                <label class=\"btn btn-secondary btn-sm\" for=\"option2\">OR</label>\n\n                <button class=\"btn-right btn btn-sm btn-primary\" type=\"button\">Add Group</button>\n                <button class=\"btn-right btn btn-sm btn-primary\" type=\"button\">Add Rule</button>\n            </div>\n\n            <div class=\"opt-container container-fluid\">\n                <div class=\"m-md-2\">\n                    <select v-model=\"selected\" @change=\"onChange($event)\">\n                        <option v-for=\"field in fields\" :key=\"field.key\">\n                            {{ field.key }}\n                        </option>\n                    </select>\n\n                    <select v-model=\"sub_drop\">\n                        <option v-for=\"field in subDrop\" :key=\"field.key\">\n                            {{ field.key }}\n                        </option>\n                    </select>\n                </div>\n\n                <div>\n                    <button class=\"btn-sm btn-primary btn position-relative\" type=\"button\">Delete</button>\n                </div>\n            </div>\n            <button class=\"btn-right btn btn-sm btn-primary\" type=\"button\">Search</button>\n        </div>\n\n        <b-col lg=\"6\" class=\"my-1\">\n            <b-form-group label=\"Filter\" label-for=\"filter-input\" label-cols-sm=\"3\" label-align-sm=\"right\" label-size=\"sm\" class=\"mb-0\">\n                <b-input-group size=\"sm\">\n                    <b-form-input id=\"filter-input\" v-model=\"filter\" type=\"search\" placeholder=\"Type to Search\"></b-form-input>\n\n                    <b-input-group-append>\n                        <b-button :disabled=\"!filter\" @click=\"filter = ''\">Clear</b-button>\n                    </b-input-group-append>\n                </b-input-group>\n            </b-form-group>\n        </b-col>\n        <b-col lg=\"6\" class=\"my-1\">\n            <b-form-group\n                    v-model=\"sortDirection\"\n                    label=\"Filter On\"\n                    description=\"Leave all unchecked to filter on all data\"\n                    label-cols-sm=\"3\"\n                    label-align-sm=\"right\"\n                    label-size=\"sm\"\n                    class=\"mb-0\"\n                    v-slot=\"{ ariaDescribedby }\"\n            >\n                <b-form-checkbox-group v-model=\"filterOn\" :aria-describedby=\"ariaDescribedby\" class=\"mt-1\">\n                    <b-form-checkbox value=\"molecule_name\">Molecule Name</b-form-checkbox>\n                    <b-form-checkbox value=\"absorb\">Absorb</b-form-checkbox>\n                    <b-form-checkbox value=\"year_publ\">Year of Publication</b-form-checkbox>\n                    <br />\n                    <b-form-checkbox value=\"lifetime\">Life Time</b-form-checkbox>\n                    <b-form-checkbox value=\"comp_class\">Compound Class</b-form-checkbox>\n                </b-form-checkbox-group>\n            </b-form-group>\n        </b-col>\n\n        <!-- POP UP -->\n\n        <div id=\"my-container\">\n            <div class=\"my-3\">\n                <!-- Our triggering (target) element -->\n                <b-button id=\"popover-reactive-1\" variant=\"primary\" ref=\"button\"> Reactive Content Using Slots </b-button>\n            </div>\n\n            <!-- Output from the popover interaction -->\n            <b-card title=\"Returned values:\" v-if=\"input1Return && input2Return\">\n                <p class=\"card-text\" style=\"max-width: 20rem\">\n                    Name: <strong>{{ input1Return }}</strong\n                ><br />\n                    Color: <strong>{{ input2Return }}</strong>\n                </p>\n            </b-card>\n\n            <!-- Our popover title and content render container -->\n            <!-- We use placement 'auto' so popover fits in the best spot on viewport -->\n            <!-- We specify the same container as the trigger button, so that popover is close to button -->\n            <b-popover\n                    target=\"popover-reactive-1\"\n                    triggers=\"click\"\n                    v-model:propName=\"popoverShow\"\n                    placement=\"auto\"\n                    container=\"my-container\"\n                    ref=\"popover\"\n                    @show=\"onShow\"\n                    @shown=\"onShown\"\n                    @hidden=\"onHidden\"\n            >\n                <template #title>\n                    <b-button @click=\"onClose\" class=\"close\" aria-label=\"Close\">\n                        <span class=\"d-inline-block\" aria-hidden=\"true\">&times;</span>\n                    </b-button>\n                    Interactive Content\n                </template>\n\n                <div>\n                    <b-form-group\n                            label=\"Name\"\n                            label-for=\"popover-input-1\"\n                            label-cols=\"3\"\n                            :state=\"input1state\"\n                            class=\"mb-1\"\n                            description=\"Enter your name\"\n                            invalid-feedback=\"This field is required\"\n                    >\n                        <b-form-input ref=\"input1\" id=\"popover-input-1\" v-model=\"input1\" :state=\"input1state\" size=\"sm\"></b-form-input>\n                    </b-form-group>\n\n                    <b-form-group\n                            label=\"Color\"\n                            label-for=\"popover-input-2\"\n                            label-cols=\"3\"\n                            :state=\"input2state\"\n                            class=\"mb-1\"\n                            description=\"Pick a color\"\n                            invalid-feedback=\"This field is required\"\n                    >\n                        <b-form-select id=\"popover-input-2\" v-model=\"input2\" :state=\"input2state\" :options=\"options\" size=\"sm\"></b-form-select>\n                    </b-form-group>\n\n                    <b-alert show class=\"small\">\n                        <strong>Current Values:</strong><br />\n                        Name: <strong>{{ input1 }}</strong\n                    ><br />\n                        Color: <strong>{{ input2 }}</strong>\n                    </b-alert>\n\n                    <b-button @click=\"onClose\" size=\"sm\" variant=\"danger\">Cancel</b-button>\n                    <b-button @click=\"onOk\" size=\"sm\" variant=\"primary\">Ok</b-button>\n                </div>\n            </b-popover>\n        </div>\n        <!-- END OF POP -->\n\n        <div class=\"table-container justify-content-md-center overflow-auto table-bordered table-hover\">\n            <b-table\n                    id=\"my-table\"\n                    :current-page=\"currentPage\"\n                    responsive\n                    :items=\"items\"\n                    :fields=\"fields\"\n                    :filter=\"filter\"\n                    :filter-included-fields=\"filterOn\"\n                    :per-page=\"perPage\"\n                    small\n                    caption-top\n            >\n                <template #table-caption>\n                    <p id=\"table-caption\">\n                        <strong>Total No.of Records found in Experimental Database: {{ rows }}</strong>\n                        <br />\n                        <strong>Filtered Results: {{ filteredItems }}</strong>\n                    </p>\n                </template>\n                <template #cell(show_details)=\"row\">\n                    <!-- As `row.showDetails` is one-way, we call the toggleDetails function on @change -->\n                    <b-form-checkbox v-model=\"row.detailsShowing\" @change=\"row.toggleDetails\"> Details via check </b-form-checkbox>\n                </template>\n                <template #cell(mol_id)=\"data\">\n                    <a href=\"#\" @click=\"onChange\">{{ data.value }}</a>\n                </template>\n            </b-table>\n        </div>\n        <b-pagination v-model=\"currentPage\" :per-page=\"perPage\" :total-rows=\"rows\" align=\"right\" aria-controls=\"my-table\" class=\"pagination\" />\n\n        <!-- <div>\n      <account-info :fields=\"fields\" />\n    </div> -->\n    </div>\n</template>\n\n<script>\nimport AppHeader from \"@/components/AppHeader\";\nimport axios from \"axios\";\nimport DataSheet from \"@/pages/DataSheet\";\nimport AccountInfo from \"@/pages/AccountInfo\";\n\nexport default {\n    name: \"SearchPage\",\n    // eslint-disable-next-line vue/no-unused-components\n    components: { AccountInfo, DataSheet, AppHeader },\n    data() {\n        return {\n            input1: \"\",\n            input1state: null,\n            input2: \"\",\n            input2state: null,\n            options: [{ text: \"- Choose 1 -\", value: \"\" }, \"Molecule Name\", \"Emperical Formula\", \"Year of Publication\"],\n            input1Return: \"\",\n            input2Return: \"\",\n            popoverShow: false,\n\n            dataMsg: \"From Master\",\n            perPage: 15,\n            currentPage: 1,\n            displayCategory: false,\n            selected: \"vghjv\",\n            sub_drop: \"\",\n            subDrop: [],\n            selectedFilter: {},\n            sub_drop_values: {\n                rdb: [{ key: \"less\" }, { key: \"greater\" }, { key: \"equals\" }],\n\n                absorb: [{ key: \"less\" }],\n            },\n\n            fields: [\n                {\n                    key: \"molecule_id\",\n                    sortable: true,\n                },\n                {\n                    key: \"molecule_name\",\n                    sortable: true,\n                },\n                {\n                    key: \"jour_cit\",\n                },\n\n                {\n                    key: \"mw_source\",\n                    sortable: true,\n                },\n                {\n                    key: \"absorb\",\n                    sortable: true,\n                },\n                {\n                    key: \"journal\",\n                },\n                {\n                    key: \"lifetime\",\n                },\n                {\n                    key: \"emp_formula_sort\",\n                },\n                {\n                    key: \"year_publ\",\n                },\n            ],\n            items: [],\n            filter: null,\n            filterOn: [],\n            filterOn2: [],\n        };\n    },\n\n    async created() {\n        try {\n            const res = await axios.get(`http://127.0.0.1:8000/api/molecule/`);\n            this.items = res.data;\n        } catch (error) {\n            console.log(error);\n        }\n    },\n    watch: {\n        input1(val) {\n            if (val) {\n                this.input1state = true;\n            }\n        },\n        input2(val) {\n            if (val) {\n                this.input2state = true;\n            }\n        },\n    },\n    computed: {\n        rows() {\n            return this.items.length;\n        },\n        filteredItems() {\n            return this.filterOn.length;\n        },\n    },\n    methods: {\n        onChange(event) {\n            this.subDrop = this.sub_drop_values[event.target.value];\n        },\n        onFiltered(filteredItems) {\n            // Trigger pagination to update the number of buttons/pages due to filtering\n            this.totalRows = filteredItems.length;\n            this.currentPage = 1;\n        },\n        onClose() {\n            this.popoverShow = false;\n        },\n        onOk() {\n            if (!this.input1) {\n                this.input1state = false;\n            }\n            if (!this.input2) {\n                this.input2state = false;\n            }\n            if (this.input1 && this.input2) {\n                this.onClose();\n                // Return our popover form results\n                this.input1Return = this.input1;\n                this.input2Return = this.input2;\n            }\n        },\n        onShow() {\n            // This is called just before the popover is shown\n            // Reset our popover form variables\n            this.input1 = \"\";\n            this.input2 = \"\";\n            this.input1state = null;\n            this.input2state = null;\n            this.input1Return = \"\";\n            this.input2Return = \"\";\n        },\n        onShown() {\n            // Called just after the popover has been shown\n            // Transfer focus to the first input\n            this.focusRef(this.$refs.input1);\n        },\n        onHidden() {\n            // Called just after the popover has finished hiding\n            // Bring focus back to the button\n            this.focusRef(this.$refs.button);\n        },\n        focusRef(ref) {\n            // Some references may be a component, functional component, or plain element\n            // This handles that check before focusing, assuming a `focus()` method exists\n            // We do this in a double `$nextTick()` to ensure components have\n            // updated & popover positioned first\n            this.$nextTick(() => {\n                this.$nextTick(() => {\n                    (ref.$el || ref).focus();\n                });\n            });\n        },\n    },\n};\n</script>\n\n<style scoped>\n.filter-container {\n    padding: 2% 2%;\n    margin: 3% 20%;\n    background-color: #f8f9fa;\n}\n\n.btn-right {\n    float: right;\n    margin-left: 2%;\n}\n\n.opt-container {\n    height: 40px;\n    display: inline-flex;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #007bff;\n    background-color: white;\n    border-radius: 10px;\n    align-items: center;\n}\n\n.dropdown {\n    align-items: center;\n}\n\n.table-container {\n    padding-bottom: unset;\n    margin-left: 4%;\n    margin-right: 4%;\n    margin-bottom: unset;\n}\n\n.pagination {\n    margin-right: 4%;\n}\n\n.dropdown-item {\n    color: black;\n}\n\n#table-caption {\n    text-align: center;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}