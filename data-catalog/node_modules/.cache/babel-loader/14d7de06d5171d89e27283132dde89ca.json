{"ast":null,"code":"import _defineProperty from \"/Users/bhavesh/Developer/SEAGrid/data-catalog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport CustosService from \"./index\";\nimport config from \"../../../config\";\nexport default class CustosTenants {\n  /**\n   * @type {CustosService}\n   */\n\n  constructor(custosService) {\n    _defineProperty(this, \"_custosService\", null);\n    this._custosService = custosService;\n  }\n  get custosService() {\n    return this._custosService;\n  }\n  fetchTenants({\n    limit,\n    offset,\n    parentClientId,\n    requesterEmail\n  }) {\n    let url = `${CustosService.ENDPOINTS.TENANTS}/tenants`;\n    const params = {\n      limit: limit,\n      offset: offset\n      // status: status,\n      // requester_email: requesterEmail\n    };\n\n    // TODO fix.\n    if (parentClientId !== config.value('superClientId')) {\n      url = `${CustosService.ENDPOINTS.TENANTS}/child/tenants`;\n      params[\"parent_client_id\"] = parentClientId;\n    } else {\n      params[\"type\"] = \"ADMIN\";\n    }\n    if (requesterEmail) {\n      params[\"requester_email\"] = requesterEmail;\n    }\n    return this.custosService.axiosInstanceWithTokenAuthorization.get(url, {\n      params: params\n    }).then(({\n      data\n    }) => data);\n  }\n\n  /**\n   * Create tenant role\n   * @param {string} name\n   * @param {string} description\n   * @param {boolean} composite\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  createTenantRole({\n    clientId,\n    name,\n    description,\n    composite = false,\n    clientLevel = false\n  }) {\n    return this.custosService.axiosInstanceWithTokenAuthorization.post(`${CustosService.ENDPOINTS.TENANTS}/roles`, {\n      \"roles\": [{\n        name,\n        description\n      }],\n      \"client_level\": clientLevel,\n      \"client_id\": clientId,\n      \"composite\": composite\n    }).then(({\n      data\n    }) => data);\n  }\n  deleteTenantRole({\n    clientId,\n    name,\n    clientLevel = false\n  }) {\n    return this.custosService.axiosInstanceWithTokenAuthorization.delete(`${CustosService.ENDPOINTS.TENANTS}/role`, {\n      data: {\n        \"role\": {\n          \"id\": name\n        },\n        \"client_level\": clientLevel,\n        \"client_id\": clientId\n      }\n    }).then(({\n      data\n    }) => data);\n  }\n\n  /**\n   * Fetch tenant roles\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  async fetchTenantRoles({\n    clientId,\n    clientLevel = false\n  }) {\n    const axiosInstance = await this.custosService.axiosInstanceWithTokenAuthorization;\n    return axiosInstance.get(`${CustosService.ENDPOINTS.TENANTS}/roles`, {\n      params: {\n        \"client_id\": clientId,\n        \"client_level\": clientLevel\n      }\n    });\n  }\n  async createTenant({\n    username,\n    firstName,\n    lastName,\n    email,\n    password,\n    tenantName,\n    redirectUris,\n    scope,\n    domain,\n    clientUri,\n    logoUri,\n    comment,\n    applicationType,\n    parentClientId,\n    parentClientSecret\n  }) {\n    let axiosInstance;\n    if (parentClientId !== config.value('superClientId')) {\n      axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n        clientId: parentClientId,\n        clientSecret: parentClientSecret\n      });\n    } else {\n      axiosInstance = this.custosService.axiosInstance;\n    }\n    return axiosInstance.post(`${CustosService.ENDPOINTS.TENANTS}/oauth2/tenant`, {\n      \"client_name\": tenantName,\n      \"requester_email\": email,\n      \"admin_username\": username,\n      \"admin_first_name\": firstName,\n      \"admin_last_name\": lastName,\n      \"admin_email\": email,\n      \"contacts\": [email],\n      \"redirect_uris\": redirectUris,\n      \"scope\": scope.join(\" \").trim(),\n      \"domain\": domain,\n      \"admin_password\": password,\n      \"client_uri\": clientUri,\n      \"logo_uri\": logoUri,\n      \"application_type\": applicationType,\n      \"comment\": comment\n    });\n  }\n  updateTenant({\n    username,\n    firstName,\n    lastName,\n    email,\n    tenantId,\n    clientId,\n    tenantName,\n    redirectUris,\n    scope,\n    domain,\n    clientUri,\n    logoUri,\n    comment,\n    applicationType,\n    requesterEmail\n  }) {\n    let axiosInstance = this.custosService.axiosInstanceWithTokenAuthorization;\n    return axiosInstance.put(`${CustosService.ENDPOINTS.TENANTS}/oauth2/tenant`, {\n      \"id\": tenantId,\n      \"client_id\": clientId,\n      \"client_name\": tenantName,\n      \"requesterEmail\": requesterEmail,\n      \"admin_username\": username,\n      \"admin_first_name\": firstName,\n      \"admin_last_name\": lastName,\n      \"admin_email\": email,\n      \"contacts\": [email],\n      \"redirect_uris\": redirectUris,\n      \"scope\": scope.join(\" \").trim(),\n      \"domain\": domain,\n      \"client_uri\": clientUri,\n      \"logo_uri\": logoUri,\n      \"application_type\": applicationType,\n      \"comment\": comment\n    });\n  }\n  fetchTenant({\n    clientId\n  }) {\n    return this.custosService.axiosInstanceWithTokenAuthorization.get(`${CustosService.ENDPOINTS.TENANTS}/oauth2/tenant`, {\n      params: {\n        client_id: clientId\n      }\n    }).then(({\n      data\n    }) => data);\n  }\n  updateTenantStatus({\n    clientId,\n    status\n  }) {\n    return this.custosService.axiosInstanceWithTokenAuthorization.post(`${CustosService.ENDPOINTS.TENANTS}/status`, {\n      client_id: clientId,\n      status: status\n    }).then(({\n      data\n    }) => data);\n  }\n}","map":{"version":3,"names":["CustosService","config","CustosTenants","constructor","custosService","_custosService","fetchTenants","limit","offset","parentClientId","requesterEmail","url","ENDPOINTS","TENANTS","params","value","axiosInstanceWithTokenAuthorization","get","then","data","createTenantRole","clientId","name","description","composite","clientLevel","post","deleteTenantRole","delete","fetchTenantRoles","axiosInstance","createTenant","username","firstName","lastName","email","password","tenantName","redirectUris","scope","domain","clientUri","logoUri","comment","applicationType","parentClientSecret","getAxiosInstanceWithClientAuthorization","clientSecret","join","trim","updateTenant","tenantId","put","fetchTenant","client_id","updateTenantStatus","status"],"sources":["/Users/bhavesh/Developer/SEAGrid/data-catalog/node_modules/airavata-custos-portal/src/lib/service/custos-service/custos-service-tenants.js"],"sourcesContent":["import CustosService from \"./index\";\nimport config from \"../../../config\";\n\nexport default class CustosTenants {\n    /**\n     * @type {CustosService}\n     */\n    _custosService = null;\n\n    constructor(custosService) {\n        this._custosService = custosService;\n    }\n\n    get custosService() {\n        return this._custosService;\n    }\n\n    fetchTenants({limit, offset, parentClientId, requesterEmail}) {\n        let url = `${CustosService.ENDPOINTS.TENANTS}/tenants`\n        const params = {\n            limit: limit,\n            offset: offset,\n            // status: status,\n            // requester_email: requesterEmail\n        };\n\n        // TODO fix.\n        if (parentClientId !== config.value('superClientId')) {\n            url = `${CustosService.ENDPOINTS.TENANTS}/child/tenants`;\n            params[\"parent_client_id\"] = parentClientId;\n        } else {\n            params[\"type\"] = \"ADMIN\";\n        }\n\n        if (requesterEmail) {\n            params[\"requester_email\"] = requesterEmail;\n        }\n\n        return this.custosService.axiosInstanceWithTokenAuthorization.get(\n            url, {params: params}\n        ).then(({data}) => data)\n\n\n    }\n\n    /**\n     * Create tenant role\n     * @param {string} name\n     * @param {string} description\n     * @param {boolean} composite\n     * @return {Promise<AxiosResponse<any>>}\n     */\n    createTenantRole({clientId, name, description, composite = false, clientLevel = false}) {\n        return this.custosService.axiosInstanceWithTokenAuthorization.post(\n            `${CustosService.ENDPOINTS.TENANTS}/roles`,\n            {\n                \"roles\": [{name, description}],\n                \"client_level\": clientLevel,\n                \"client_id\": clientId,\n                \"composite\": composite\n            }\n        ).then(({data}) => data);\n    }\n\n    deleteTenantRole({clientId, name, clientLevel = false}) {\n        return this.custosService.axiosInstanceWithTokenAuthorization.delete(\n            `${CustosService.ENDPOINTS.TENANTS}/role`,\n            {\n                data: {\n                    \"role\": {\"id\": name},\n                    \"client_level\": clientLevel,\n                    \"client_id\": clientId\n                }\n            }\n        ).then(({data}) => data);\n    }\n\n    /**\n     * Fetch tenant roles\n     * @return {Promise<AxiosResponse<any>>}\n     */\n    async fetchTenantRoles({clientId, clientLevel = false}) {\n        const axiosInstance = await this.custosService.axiosInstanceWithTokenAuthorization;\n        return axiosInstance.get(\n            `${CustosService.ENDPOINTS.TENANTS}/roles`,\n            {\n                params: {\n                    \"client_id\": clientId,\n                    \"client_level\": clientLevel\n                }\n            }\n        );\n    }\n\n    async createTenant({username, firstName, lastName, email, password, tenantName, redirectUris, scope, domain, clientUri, logoUri, comment, applicationType, parentClientId, parentClientSecret}) {\n        let axiosInstance;\n        if (parentClientId !== config.value('superClientId')) {\n            axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n                clientId: parentClientId,\n                clientSecret: parentClientSecret\n            });\n        } else {\n            axiosInstance = this.custosService.axiosInstance;\n        }\n\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.TENANTS}/oauth2/tenant`,\n            {\n                \"client_name\": tenantName,\n                \"requester_email\": email,\n                \"admin_username\": username,\n                \"admin_first_name\": firstName,\n                \"admin_last_name\": lastName,\n                \"admin_email\": email,\n                \"contacts\": [email],\n                \"redirect_uris\": redirectUris,\n                \"scope\": scope.join(\" \").trim(),\n                \"domain\": domain,\n                \"admin_password\": password,\n                \"client_uri\": clientUri,\n                \"logo_uri\": logoUri,\n                \"application_type\": applicationType,\n                \"comment\": comment\n            }\n        );\n    }\n\n    updateTenant({username, firstName, lastName, email, tenantId, clientId, tenantName, redirectUris, scope, domain, clientUri, logoUri, comment, applicationType, requesterEmail}) {\n        let axiosInstance = this.custosService.axiosInstanceWithTokenAuthorization;\n\n        return axiosInstance.put(\n            `${CustosService.ENDPOINTS.TENANTS}/oauth2/tenant`,\n            {\n                \"id\": tenantId,\n                \"client_id\": clientId,\n                \"client_name\": tenantName,\n                \"requesterEmail\": requesterEmail,\n                \"admin_username\": username,\n                \"admin_first_name\": firstName,\n                \"admin_last_name\": lastName,\n                \"admin_email\": email,\n                \"contacts\": [email],\n                \"redirect_uris\": redirectUris,\n                \"scope\": scope.join(\" \").trim(),\n                \"domain\": domain,\n                \"client_uri\": clientUri,\n                \"logo_uri\": logoUri,\n                \"application_type\": applicationType,\n                \"comment\": comment\n            }\n        );\n    }\n\n    fetchTenant({clientId}) {\n        return this.custosService.axiosInstanceWithTokenAuthorization.get(\n            `${CustosService.ENDPOINTS.TENANTS}/oauth2/tenant`,\n            {\n                params: {\n                    client_id: clientId\n                }\n            }\n        ).then(({data}) => data)\n    }\n\n    updateTenantStatus({clientId, status}) {\n        return this.custosService.axiosInstanceWithTokenAuthorization.post(\n            `${CustosService.ENDPOINTS.TENANTS}/status`,\n            {\n                client_id: clientId,\n                status: status\n            }\n        ).then(({data}) => data)\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}