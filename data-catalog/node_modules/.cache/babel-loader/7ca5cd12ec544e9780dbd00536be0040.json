{"ast":null,"code":"import _defineProperty from \"/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport CustosService from \"./index\";\nexport default class CustosUsers {\n  /**\n   * @type {CustosService}\n   */\n\n  constructor(custosService) {\n    _defineProperty(this, \"_custosService\", null);\n    this._custosService = custosService;\n  }\n  get custosService() {\n    return this._custosService;\n  }\n  async registerUser({\n    username,\n    firstName,\n    lastName,\n    password,\n    email\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n    return axiosInstance.post(`${CustosService.ENDPOINTS.USERS}/user`, {\n      'client_id': this.custosService.clientId,\n      'username': username,\n      'first_name': firstName,\n      'last_name': lastName,\n      'password': password,\n      'temporary_password': false,\n      'email': email\n    });\n  }\n  async enableUser({\n    clientId,\n    username\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.post(`${CustosService.ENDPOINTS.USERS}/user/activation`, {\n      'username': username\n    });\n  }\n  async disableUser({\n    clientId,\n    username\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.post(`${CustosService.ENDPOINTS.USERS}/user/deactivation`, {\n      'username': username\n    });\n  }\n  async checkUsernameValidity({\n    username\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n    return axiosInstance.get(`${CustosService.ENDPOINTS.USERS}/user/availability`, {\n      params: {\n        'username': username\n      }\n    });\n  }\n  findUsers({\n    offset = 0,\n    limit = 20,\n    username = null,\n    groupId = null,\n    clientId = null\n  }) {\n    if (groupId) {\n      return this.custosService.axiosInstanceWithTokenAuthorization.get(`${CustosService.ENDPOINTS.GROUPS}/user/group/memberships/child`, {\n        params: {\n          \"group.id\": groupId,\n          \"client_id\": clientId\n        }\n      }).then(({\n        data: {\n          profiles\n        }\n      }) => {\n        return profiles;\n      });\n    } else {\n      return this.custosService.axiosInstanceWithTokenAuthorization.get(`${CustosService.ENDPOINTS.USERS}/users`, {\n        params: {\n          offset: offset,\n          limit: limit,\n          client_id: clientId,\n          'user.id': username\n        }\n      }).then(({\n        data: {\n          users\n        }\n      }) => {\n        return users;\n      });\n    }\n  }\n\n  /**\n   * @typedef {Object} UserAttribute\n   * @param {string} key\n   * @param {string[]} values\n   */\n\n  /**\n   * Add User Attributes\n   * @param {UserAttribute[]} attributes\n   * @param {string[]} usernames\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  addUserAttribute({\n    clientId,\n    attributes,\n    usernames\n  }) {\n    return this.custosService.axiosInstanceWithTokenAuthorization.post(`${CustosService.ENDPOINTS.USERS}/attributes`, {\n      client_id: clientId,\n      attributes: attributes,\n      users: usernames\n    });\n  }\n\n  /**\n   * Delete User Attributes\n   * @param {UserAttribute[]} attributes\n   * @param {string[]} usernames\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  deleteUserAttributes({\n    clientId,\n    attributes,\n    usernames\n  }) {\n    return this.custosService.axiosInstanceWithTokenAuthorization.delete(`${CustosService.ENDPOINTS.USERS}/attributes`, {\n      data: {\n        client_id: clientId,\n        attributes: attributes,\n        users: usernames\n      }\n    });\n  }\n\n  /**\n   * Add Roles to User\n   * @param {string[]} roles\n   * @param {string[]} usernames\n   * @param {boolean} isClientLevel\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  async addRolesToUser({\n    clientId,\n    roles,\n    usernames,\n    clientLevel = false\n  }) {\n    const axiosInstance = await this.custosService.axiosInstanceWithTokenAuthorization;\n    return axiosInstance.post(`${CustosService.ENDPOINTS.USERS}/users/roles`, {\n      client_id: clientId,\n      roles: roles,\n      usernames: usernames,\n      client_level: clientLevel\n    });\n  }\n\n  /**\n   * Delete Roles From User\n   * @param {string[]} clientRoles\n   * @param {string} username\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  deleteRolesFromUser({\n    clientId,\n    roles,\n    username,\n    clientLevel\n  }) {\n    return this.custosService.axiosInstanceWithTokenAuthorization.delete(`${CustosService.ENDPOINTS.USERS}/user/roles`, {\n      data: {\n        client_id: clientId,\n        roles: roles,\n        username: username,\n        client_level: clientLevel\n      }\n    });\n  }\n  async updateProfile({\n    clientId,\n    username,\n    firstName,\n    lastName,\n    email\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({\n      clientId\n    });\n    return axiosInstance.put(`${CustosService.ENDPOINTS.USERS}/user/profile`, {\n      username: username,\n      first_name: firstName,\n      last_name: lastName,\n      email: email\n    }).then(({\n      data\n    }) => data);\n  }\n  getTenantLevelRoles() {\n    return this.getRoles({\n      isClientLevel: false\n    });\n  }\n  getClientLevelRoles() {\n    return this.getRoles({\n      isClientLevel: true\n    });\n  }\n  async getRoles({\n    isClientLevel = false\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n    return axiosInstance.get(`${CustosService.ENDPOINTS.USERS}/roles`, {\n      params: {\n        client_level: isClientLevel\n      }\n    });\n  }\n}","map":{"version":3,"names":["CustosService","CustosUsers","constructor","custosService","_custosService","registerUser","username","firstName","lastName","password","email","axiosInstance","getAxiosInstanceWithClientAuthorization","post","ENDPOINTS","USERS","clientId","enableUser","disableUser","checkUsernameValidity","get","params","findUsers","offset","limit","groupId","axiosInstanceWithTokenAuthorization","GROUPS","then","data","profiles","client_id","users","addUserAttribute","attributes","usernames","deleteUserAttributes","delete","addRolesToUser","roles","clientLevel","client_level","deleteRolesFromUser","updateProfile","put","first_name","last_name","getTenantLevelRoles","getRoles","isClientLevel","getClientLevelRoles"],"sources":["/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/airavata-custos-portal/src/lib/service/custos-service/custos-service-users.js"],"sourcesContent":["import CustosService from \"./index\";\n\nexport default class CustosUsers {\n    /**\n     * @type {CustosService}\n     */\n    _custosService = null;\n\n    constructor(custosService) {\n        this._custosService = custosService;\n    }\n\n    get custosService() {\n        return this._custosService;\n    }\n\n    async registerUser({username, firstName, lastName, password, email}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.USERS}/user`,\n            {\n                'client_id': this.custosService.clientId,\n                'username': username,\n                'first_name': firstName,\n                'last_name': lastName,\n                'password': password,\n                'temporary_password': false,\n                'email': email\n            }\n        );\n    }\n\n    async enableUser({clientId, username}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.USERS}/user/activation`,\n            {\n                'username': username\n            }\n        );\n    }\n\n    async disableUser({clientId, username}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.USERS}/user/deactivation`,\n            {\n                'username': username\n            }\n        );\n    }\n\n    async checkUsernameValidity({username}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n        return axiosInstance.get(\n            `${CustosService.ENDPOINTS.USERS}/user/availability`,\n            {\n                params: {'username': username}\n            }\n        );\n    }\n\n    findUsers({offset = 0, limit = 20, username = null, groupId = null, clientId = null}) {\n        if (groupId) {\n            return this.custosService.axiosInstanceWithTokenAuthorization.get(\n                `${CustosService.ENDPOINTS.GROUPS}/user/group/memberships/child`,\n                {\n                    params: {\"group.id\": groupId, \"client_id\": clientId}\n                }\n            ).then(({data: {profiles}}) => {\n                return profiles;\n            });\n        } else {\n            return this.custosService.axiosInstanceWithTokenAuthorization.get(\n                `${CustosService.ENDPOINTS.USERS}/users`,\n                {\n                    params: {offset: offset, limit: limit, client_id: clientId, 'user.id': username}\n                }\n            ).then(({data: {users}}) => {\n                return users;\n            });\n        }\n    }\n\n    /**\n     * @typedef {Object} UserAttribute\n     * @param {string} key\n     * @param {string[]} values\n     */\n\n    /**\n     * Add User Attributes\n     * @param {UserAttribute[]} attributes\n     * @param {string[]} usernames\n     * @return {Promise<AxiosResponse<any>>}\n     */\n    addUserAttribute({clientId, attributes, usernames}) {\n        return this.custosService.axiosInstanceWithTokenAuthorization.post(\n            `${CustosService.ENDPOINTS.USERS}/attributes`,\n            {\n                client_id: clientId,\n                attributes: attributes,\n                users: usernames\n            }\n        );\n    }\n\n    /**\n     * Delete User Attributes\n     * @param {UserAttribute[]} attributes\n     * @param {string[]} usernames\n     * @return {Promise<AxiosResponse<any>>}\n     */\n    deleteUserAttributes({clientId, attributes, usernames}) {\n        return this.custosService.axiosInstanceWithTokenAuthorization.delete(\n            `${CustosService.ENDPOINTS.USERS}/attributes`,\n            {\n                data: {\n                    client_id: clientId,\n                    attributes: attributes,\n                    users: usernames\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Add Roles to User\n     * @param {string[]} roles\n     * @param {string[]} usernames\n     * @param {boolean} isClientLevel\n     * @return {Promise<AxiosResponse<any>>}\n     */\n    async addRolesToUser({clientId, roles, usernames, clientLevel = false}) {\n        const axiosInstance = await this.custosService.axiosInstanceWithTokenAuthorization;\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.USERS}/users/roles`,\n            {\n                client_id: clientId,\n                roles: roles,\n                usernames: usernames,\n                client_level: clientLevel\n            }\n        );\n    }\n\n    /**\n     * Delete Roles From User\n     * @param {string[]} clientRoles\n     * @param {string} username\n     * @return {Promise<AxiosResponse<any>>}\n     */\n    deleteRolesFromUser({clientId, roles, username, clientLevel}) {\n        return this.custosService.axiosInstanceWithTokenAuthorization.delete(\n            `${CustosService.ENDPOINTS.USERS}/user/roles`,\n            {\n                data: {\n                    client_id: clientId,\n                    roles: roles,\n                    username: username,\n                    client_level: clientLevel\n                }\n            }\n        );\n    }\n\n    async updateProfile({clientId, username, firstName, lastName, email}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization({clientId});\n        return axiosInstance.put(\n            `${CustosService.ENDPOINTS.USERS}/user/profile`,\n            {\n                username: username,\n                first_name: firstName,\n                last_name: lastName,\n                email: email\n            }\n        ).then(({data}) => data);\n    }\n\n    getTenantLevelRoles() {\n        return this.getRoles({isClientLevel: false});\n    }\n\n    getClientLevelRoles() {\n        return this.getRoles({isClientLevel: true});\n    }\n\n    async getRoles({isClientLevel = false}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n        return axiosInstance.get(\n            `${CustosService.ENDPOINTS.USERS}/roles`,\n            {\n                params: {client_level: isClientLevel}\n            }\n        );\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}