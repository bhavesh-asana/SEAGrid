{"ast":null,"code":"import decode from \"jwt-decode\";\nimport { hasTokenExpired } from \"../util/jwt.util\";\nimport { custosService } from \"../util/custos.util\";\n\n// const ACCESS_TOKEN_KEY = 'access_token';\n// const ID_TOKEN_KEY = 'id_token';\n// const REFRESH_TOKEN_KEY = 'refresh_token';\n\nconst state = {\n  accessToken: null,\n  idToken: null,\n  refreshToken: null\n};\nconst actions = {\n  async init({\n    commit\n  }) {\n    commit(\"SET_TOKENS\", {\n      accessToken: custosService.identity.accessToken,\n      idToken: custosService.identity.idToken,\n      refreshToken: custosService.identity.refreshToken\n    });\n  },\n  async fetchAuthorizationEndpoint(obj, {\n    ciLogonInstitutionEntityId = null\n  } = {}) {\n    const {\n      clientId,\n      redirectURI\n    } = custosService;\n    const {\n      data: {\n        authorization_endpoint\n      }\n    } = await custosService.identity.getOpenIdConfig();\n    let url = `${authorization_endpoint}?response_type=code&client_id=${clientId}&redirect_uri=${redirectURI}&scope=openid`;\n    if (ciLogonInstitutionEntityId) {\n      url += `&kc_idp_hint=oidc&idphint=${ciLogonInstitutionEntityId}`;\n    } else {\n      url += `&kc_idp_hint=oidc`;\n    }\n    window.location.href = url;\n  },\n  async authenticateUsingCode({\n    commit\n  }, {\n    code\n  }) {\n    const {\n      data: {\n        access_token,\n        id_token,\n        refresh_token\n      }\n    } = await custosService.identity.getToken({\n      code\n    });\n    commit(\"SET_TOKENS\", {\n      accessToken: access_token,\n      idToken: id_token,\n      refreshToken: refresh_token\n    });\n  },\n  async authenticateLocally({\n    commit\n  }, {\n    username,\n    password\n  }) {\n    const {\n      data: {\n        access_token,\n        id_token,\n        refresh_token\n      }\n    } = await custosService.identity.localLogin({\n      username,\n      password\n    });\n    commit(\"SET_TOKENS\", {\n      accessToken: access_token,\n      idToken: id_token,\n      refreshToken: refresh_token\n    });\n  },\n  async logout({\n    commit\n  }) {\n    await custosService.identity.logout();\n    commit(\"CLEAR_TOKENS\");\n  },\n  async refreshAuthentication({\n    commit,\n    state\n  }) {\n    if (state.refreshToken && hasTokenExpired(state.refreshToken)) {\n      await custosService.identity.getTokenUsingRefreshToken().catch(() => commit(\"CLEAR_TOKENS\")).then(res => {\n        if (!res || !res.data) {\n          commit(\"CLEAR_TOKENS\");\n        } else {\n          const {\n            data: {\n              access_token,\n              id_token,\n              refresh_token\n            }\n          } = res;\n          commit(\"SET_TOKENS\", {\n            accessToken: access_token,\n            idToken: id_token,\n            refreshToken: refresh_token\n          });\n        }\n      });\n    }\n  }\n};\nconst mutations = {\n  SET_TOKENS(state, {\n    accessToken,\n    idToken,\n    refreshToken\n  }) {\n    // custosService.identity.accessToken = accessToken;\n    // custosService.identity.idToken = idToken;\n    // custosService.identity.refreshToken = refreshToken;\n\n    state.accessToken = accessToken;\n    state.idToken = idToken;\n    state.refreshToken = refreshToken;\n  },\n  CLEAR_TOKENS(state) {\n    // custosService.identity.accessToken = null;\n    // custosService.identity.idToken = null;\n    // custosService.identity.refreshToken = null;\n\n    state.accessToken = null;\n    state.idToken = null;\n    state.refreshToken = null;\n  }\n};\nconst getters = {\n  accessToken(state) {\n    return state.accessToken;\n  },\n  idToken(state) {\n    return state.idToken;\n  },\n  refreshToken(state) {\n    return state.refreshToken;\n  },\n  authenticated(state, getters) {\n    if (getters.idToken && !hasTokenExpired(state.idToken)) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  isAdmin(state, getters) {\n    try {\n      let {\n        realm_access: {\n          roles\n        }\n      } = decode(getters.accessToken);\n      return roles.indexOf(\"admin\") >= 0;\n    } catch (err) {\n      return false;\n    }\n  },\n  currentUsername(state, getters) {\n    if (getters.accessToken) {\n      try {\n        let {\n          preferred_username\n        } = decode(getters.accessToken);\n        return preferred_username;\n      } catch (err) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["decode","hasTokenExpired","custosService","state","accessToken","idToken","refreshToken","actions","init","commit","identity","fetchAuthorizationEndpoint","obj","ciLogonInstitutionEntityId","clientId","redirectURI","data","authorization_endpoint","getOpenIdConfig","url","window","location","href","authenticateUsingCode","code","access_token","id_token","refresh_token","getToken","authenticateLocally","username","password","localLogin","logout","refreshAuthentication","getTokenUsingRefreshToken","catch","then","res","mutations","SET_TOKENS","CLEAR_TOKENS","getters","authenticated","isAdmin","realm_access","roles","indexOf","err","currentUsername","preferred_username","namespaced"],"sources":["/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/airavata-custos-portal/src/lib/store/modules/auth.store.js"],"sourcesContent":["import decode from \"jwt-decode\";\nimport {hasTokenExpired} from \"../util/jwt.util\";\nimport {custosService} from \"../util/custos.util\";\n\n// const ACCESS_TOKEN_KEY = 'access_token';\n// const ID_TOKEN_KEY = 'id_token';\n// const REFRESH_TOKEN_KEY = 'refresh_token';\n\nconst state = {\n    accessToken: null,\n    idToken: null,\n    refreshToken: null\n};\n\nconst actions = {\n    async init({commit}) {\n        commit(\"SET_TOKENS\", {\n            accessToken: custosService.identity.accessToken,\n            idToken: custosService.identity.idToken,\n            refreshToken: custosService.identity.refreshToken\n        });\n    },\n    async fetchAuthorizationEndpoint(obj, {ciLogonInstitutionEntityId = null} = {}) {\n        const {clientId, redirectURI} = custosService;\n        const {data: {authorization_endpoint}} = await custosService.identity.getOpenIdConfig();\n        let url = `${authorization_endpoint}?response_type=code&client_id=${clientId}&redirect_uri=${redirectURI}&scope=openid`;\n\n        if (ciLogonInstitutionEntityId) {\n            url += `&kc_idp_hint=oidc&idphint=${ciLogonInstitutionEntityId}`;\n        } else {\n            url += `&kc_idp_hint=oidc`;\n        }\n\n        window.location.href = url;\n    },\n    async authenticateUsingCode({commit}, {code}) {\n        const {data: {access_token, id_token, refresh_token}} = await custosService.identity.getToken({code});\n        commit(\"SET_TOKENS\", {accessToken: access_token, idToken: id_token, refreshToken: refresh_token});\n    },\n    async authenticateLocally({commit}, {username, password}) {\n        const {data: {access_token, id_token, refresh_token}} = await custosService.identity.localLogin({\n            username, password\n        });\n        commit(\"SET_TOKENS\", {accessToken: access_token, idToken: id_token, refreshToken: refresh_token});\n    },\n    async logout({commit}) {\n        await custosService.identity.logout();\n        commit(\"CLEAR_TOKENS\");\n    },\n    async refreshAuthentication({commit, state}) {\n        if (state.refreshToken && hasTokenExpired(state.refreshToken)) {\n            await custosService.identity.getTokenUsingRefreshToken()\n                .catch(() => commit(\"CLEAR_TOKENS\"))\n                .then((res) => {\n                    if (!res || !res.data) {\n                        commit(\"CLEAR_TOKENS\")\n                    } else {\n                        const {data: {access_token, id_token, refresh_token}} = res;\n                        commit(\"SET_TOKENS\", {\n                            accessToken: access_token,\n                            idToken: id_token,\n                            refreshToken: refresh_token\n                        });\n                    }\n                });\n        }\n    }\n}\n\nconst mutations = {\n    SET_TOKENS(state, {accessToken, idToken, refreshToken}) {\n        // custosService.identity.accessToken = accessToken;\n        // custosService.identity.idToken = idToken;\n        // custosService.identity.refreshToken = refreshToken;\n\n        state.accessToken = accessToken;\n        state.idToken = idToken;\n        state.refreshToken = refreshToken;\n    },\n    CLEAR_TOKENS(state) {\n        // custosService.identity.accessToken = null;\n        // custosService.identity.idToken = null;\n        // custosService.identity.refreshToken = null;\n\n        state.accessToken = null;\n        state.idToken = null;\n        state.refreshToken = null;\n    }\n}\n\nconst getters = {\n    accessToken(state) {\n        return state.accessToken;\n    },\n    idToken(state) {\n        return state.idToken;\n    },\n    refreshToken(state) {\n        return state.refreshToken;\n    },\n    authenticated(state, getters) {\n        if (getters.idToken && !hasTokenExpired(state.idToken)) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    isAdmin(state, getters) {\n        try {\n            let {realm_access: {roles}} = decode(getters.accessToken);\n            return roles.indexOf(\"admin\") >= 0;\n        } catch (err) {\n            return false;\n        }\n    },\n    currentUsername(state, getters) {\n        if (getters.accessToken) {\n            try {\n                let {preferred_username} = decode(getters.accessToken);\n                return preferred_username;\n            } catch (err) {\n                return null\n            }\n        } else {\n            return null\n        }\n    }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}