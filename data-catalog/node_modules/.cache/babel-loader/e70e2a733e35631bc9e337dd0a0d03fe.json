{"ast":null,"code":"import _defineProperty from \"/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport CustosService from \"./index\";\nconst ACCESS_TOKEN_KEY = 'access_token';\nconst ID_TOKEN_KEY = 'id_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nexport default class CustosIdentity {\n  /**\n   * @type {CustosService}\n   */\n\n  constructor(custosService) {\n    _defineProperty(this, \"_custosService\", null);\n    _defineProperty(this, \"changeListeners\", []);\n    this._custosService = custosService;\n    window.addEventListener('storage', e => {\n      for (let i = 0; i < this.changeListeners.length; i++) {\n        this.changeListeners[i] && typeof this.changeListeners[i] === \"function\" && this.changeListeners[i](e);\n      }\n    });\n  }\n  get accessToken() {\n    return localStorage.getItem(ACCESS_TOKEN_KEY);\n  }\n  set accessToken(accessToken) {\n    if (accessToken == null) {\n      localStorage.removeItem(ACCESS_TOKEN_KEY);\n    } else {\n      localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n    }\n  }\n  get refreshToken() {\n    return localStorage.getItem(REFRESH_TOKEN_KEY);\n  }\n  set refreshToken(refreshToken) {\n    if (refreshToken == null) {\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\n    } else {\n      localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n    }\n  }\n  get idToken() {\n    return localStorage.getItem(ID_TOKEN_KEY);\n  }\n  set idToken(idToken) {\n    if (idToken == null) {\n      localStorage.removeItem(ID_TOKEN_KEY);\n    } else {\n      localStorage.setItem(ID_TOKEN_KEY, idToken);\n    }\n  }\n  get custosService() {\n    return this._custosService;\n  }\n  onChange(changeListener) {\n    this.changeListeners.push(changeListener);\n  }\n  async getOpenIdConfig() {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n    return axiosInstance.get(`${CustosService.ENDPOINTS.IDENTITY}/.well-known/openid-configuration`, {\n      params: {\n        'client_id': this.custosService.clientId\n      }\n    });\n  }\n  _saveTokenResponse(response) {\n    const {\n      data: {\n        access_token,\n        id_token,\n        refresh_token\n      }\n    } = response;\n    this.accessToken = access_token;\n    this.idToken = id_token;\n    this.refreshToken = refresh_token;\n    return response;\n  }\n  async getToken({\n    code\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n    return axiosInstance.post(`${CustosService.ENDPOINTS.IDENTITY}/token`, {\n      'code': code,\n      'redirect_uri': this.custosService.redirectURI,\n      'grant_type': 'authorization_code'\n    }).then(this._saveTokenResponse.bind(this));\n  }\n  async localLogin({\n    username,\n    password\n  }) {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n    return axiosInstance.post(`${CustosService.ENDPOINTS.IDENTITY}/token`, {\n      'grant_type': 'password',\n      'username': username,\n      'password': password\n    }).then(this._saveTokenResponse.bind(this));\n  }\n  async logout() {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n    return axiosInstance.post(`${CustosService.ENDPOINTS.IDENTITY}/user/logout`, {\n      refresh_token: this.refreshToken\n    }).then(() => {\n      this.accessToken = null;\n      this.idToken = null;\n      this.refreshToken = null;\n    });\n  }\n  async getTokenUsingRefreshToken() {\n    const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n    return axiosInstance.post(`${CustosService.ENDPOINTS.IDENTITY}/token`, {\n      'refresh_token': this.custosService.identity.refreshToken,\n      'grant_type': 'refresh_token'\n    }).then(this._saveTokenResponse.bind(this));\n  }\n  getClientSecret({\n    clientId\n  }) {\n    return this.custosService.axiosInstanceWithTokenAuthorization.get(`${CustosService.ENDPOINTS.IDENTITY}/credentials`, {\n      params: {\n        \"client_id\": clientId\n      }\n    }).then(({\n      data: {\n        custos_client_secret\n      }\n    }) => custos_client_secret);\n  }\n}","map":{"version":3,"names":["CustosService","ACCESS_TOKEN_KEY","ID_TOKEN_KEY","REFRESH_TOKEN_KEY","CustosIdentity","constructor","custosService","_custosService","window","addEventListener","e","i","changeListeners","length","accessToken","localStorage","getItem","removeItem","setItem","refreshToken","idToken","onChange","changeListener","push","getOpenIdConfig","axiosInstance","getAxiosInstanceWithClientAuthorization","get","ENDPOINTS","IDENTITY","params","clientId","_saveTokenResponse","response","data","access_token","id_token","refresh_token","getToken","code","post","redirectURI","then","bind","localLogin","username","password","logout","getTokenUsingRefreshToken","identity","getClientSecret","axiosInstanceWithTokenAuthorization","custos_client_secret"],"sources":["/Users/bhavesh/Developer/airavata-sandbox/gsoc2022/smilesdb/data-catalog/node_modules/airavata-custos-portal/src/lib/service/custos-service/custos-service-identity.js"],"sourcesContent":["import CustosService from \"./index\";\n\nconst ACCESS_TOKEN_KEY = 'access_token';\nconst ID_TOKEN_KEY = 'id_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\n\nexport default class CustosIdentity {\n    /**\n     * @type {CustosService}\n     */\n    _custosService = null;\n    changeListeners = [];\n\n    constructor(custosService) {\n        this._custosService = custosService;\n\n        window.addEventListener('storage', (e) => {\n            for (let i = 0; i < this.changeListeners.length; i++) {\n                this.changeListeners[i] && typeof this.changeListeners[i] === \"function\" && this.changeListeners[i](e);\n            }\n        });\n    }\n\n    get accessToken() {\n        return localStorage.getItem(ACCESS_TOKEN_KEY);\n    }\n\n    set accessToken(accessToken) {\n        if (accessToken == null) {\n            localStorage.removeItem(ACCESS_TOKEN_KEY);\n        } else {\n            localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n        }\n    }\n\n    get refreshToken() {\n        return localStorage.getItem(REFRESH_TOKEN_KEY);\n    }\n\n    set refreshToken(refreshToken) {\n        if (refreshToken == null) {\n            localStorage.removeItem(REFRESH_TOKEN_KEY);\n        } else {\n            localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n        }\n    }\n\n    get idToken() {\n        return localStorage.getItem(ID_TOKEN_KEY);\n    }\n\n    set idToken(idToken) {\n        if (idToken == null) {\n            localStorage.removeItem(ID_TOKEN_KEY);\n        } else {\n            localStorage.setItem(ID_TOKEN_KEY, idToken);\n        }\n    }\n\n    get custosService() {\n        return this._custosService;\n    }\n\n    onChange(changeListener) {\n        this.changeListeners.push(changeListener);\n    }\n\n    async getOpenIdConfig() {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n        return axiosInstance.get(\n            `${CustosService.ENDPOINTS.IDENTITY}/.well-known/openid-configuration`,\n            {\n                params: {'client_id': this.custosService.clientId}\n            }\n        );\n    }\n\n    _saveTokenResponse(response) {\n        const {data: {access_token, id_token, refresh_token}} = response;\n\n        this.accessToken = access_token;\n        this.idToken = id_token;\n        this.refreshToken = refresh_token;\n\n        return response;\n    }\n\n    async getToken({code}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.IDENTITY}/token`,\n            {'code': code, 'redirect_uri': this.custosService.redirectURI, 'grant_type': 'authorization_code'}\n        ).then(this._saveTokenResponse.bind(this));\n    }\n\n    async localLogin({username, password}) {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.IDENTITY}/token`,\n            {'grant_type': 'password', 'username': username, 'password': password}\n        ).then(this._saveTokenResponse.bind(this));\n    }\n\n    async logout() {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.IDENTITY}/user/logout`,\n            {refresh_token: this.refreshToken}\n        ).then(() => {\n            this.accessToken = null;\n            this.idToken = null;\n            this.refreshToken = null;\n        })\n    }\n\n    async getTokenUsingRefreshToken() {\n        const axiosInstance = await this.custosService.getAxiosInstanceWithClientAuthorization();\n        return axiosInstance.post(\n            `${CustosService.ENDPOINTS.IDENTITY}/token`,\n            {'refresh_token': this.custosService.identity.refreshToken, 'grant_type': 'refresh_token'}\n        ).then(this._saveTokenResponse.bind(this));\n    }\n\n    getClientSecret({clientId}) {\n        return this.custosService.axiosInstanceWithTokenAuthorization.get(\n            `${CustosService.ENDPOINTS.IDENTITY}/credentials`,\n            {\n                params: {\n                    \"client_id\": clientId\n                }\n            }\n        ).then(({data: {custos_client_secret}}) => custos_client_secret);\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}